<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Examination">
  <resultMap id="BaseResultMap" type="com.kingnod.etraining.activity.entity.Examination">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
    <id column="A_ID" jdbcType="DECIMAL" property="id" />
    <result column="A_FOLDER_ID" jdbcType="DECIMAL" property="folderId" />
    <result column="A_ATY_PAPER_ID" jdbcType="DECIMAL" property="atyPaperId" />
    <result column="A_NAME" jdbcType="VARCHAR" property="name" />
    <result column="A_OPEN_TIME" jdbcType="TIMESTAMP" property="openTime" />
    <result column="A_CLOSE_TIME" jdbcType="TIMESTAMP" property="closeTime" />
    <result column="A_SCORING_TYPE" jdbcType="CHAR" property="scoringType" />
    <result column="A_ATY_TIME" jdbcType="DECIMAL" property="atyTime" />
    <result column="A_ENABLED_CHECH" jdbcType="CHAR" property="enabledChech" />
    <result column="A_ANSWER_ORDER" jdbcType="CHAR" property="answerOrder" />
    <result column="A_DISPLAY_SCORE" jdbcType="CHAR" property="displayScore" />
    <result column="A_DISPLAY_ORDER" jdbcType="CHAR" property="displayOrder" />
    <result column="A_ANSWER_DISPLAY_ORDER" jdbcType="CHAR" property="answerDisplayOrder" />
    <result column="A_DISPLAY_ANSWER" jdbcType="CHAR" property="displayAnswer" />
    <result column="A_DISPLAY_OBJECTIVE_SCORE" jdbcType="CHAR" property="displayObjectiveScore" />
    <result column="A_DISPLAY_QUESTION_NUMBER" jdbcType="VARCHAR" property="displayQuestionNumber" />
    <result column="A_ENABLED_CUT_SCREEN" jdbcType="CHAR" property="enabledCutScreen" />
    <result column="A_CUT_SCREEN_TIMES" jdbcType="DECIMAL" property="cutScreenTimes" />
    <result column="A_ATY_RESTRAINT" jdbcType="CHAR" property="atyRestraint" />
    <result column="A_ATY_RESTRAINT_TIMES" jdbcType="DECIMAL" property="atyRestraintTimes" />
    <result column="A_REEXAM_TIME_INTERVAL" jdbcType="DECIMAL" property="reexamTimeInterval" />
    <result column="A_REEXAM_TIMES" jdbcType="DECIMAL" property="reexamTimes" />
    <result column="A_REQUIRED_ANSWER_COUNT" jdbcType="DECIMAL" property="requiredAnswerCount" />
    <result column="A_ENABLED_FEEDBACK" jdbcType="CHAR" property="enabledFeedback" />
    <result column="A_RESTRICT_IP" jdbcType="CHAR" property="restrictIp" />
    <result column="A_SAVING_IP" jdbcType="CHAR" property="savingIp" />
    <result column="A_WARNING_TIME" jdbcType="DECIMAL" property="warningTime" />
    <result column="A_WARNING_TEXT" jdbcType="VARCHAR" property="warningText" />
    <result column="A_REMARKS" jdbcType="VARCHAR" property="remarks" />
    <result column="A_RECORD_STATUS" jdbcType="CHAR" property="recordStatus" />
    <result column="A_UPDATE_COUNT" jdbcType="DECIMAL" property="updateCount" />
    <result column="A_CREATOR_ID" jdbcType="DECIMAL" property="creatorId" />
    <result column="A_CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
    <result column="A_UPDATER_ID" jdbcType="DECIMAL" property="updaterId" />
    <result column="A_UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="A_PUBLISH_STATUS" jdbcType="CHAR" property="publishStatus" />
    <result column="A_ADVANCE_TIME" jdbcType="DECIMAL" property="advanceTime" />
    <result column="A_OVERDUE_TIME" jdbcType="DECIMAL" property="overdueTime" />
    <result column="A_MARKING_CHECK" jdbcType="CHAR" property="markingCheck" />
    <result column="A_PASS_SCORE" jdbcType="DECIMAL" property="passScore" />
    <result column="PAPER_NAME" jdbcType="VARCHAR" property="paperName" />
    <association column="A_ATY_PAPER_ID" property="paper" select="Paper.findById" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
    A.ID as A_ID, A.FOLDER_ID as A_FOLDER_ID, A.ATY_PAPER_ID as A_ATY_PAPER_ID, A.NAME as A_NAME, 
    A.OPEN_TIME as A_OPEN_TIME, A.CLOSE_TIME as A_CLOSE_TIME, A.SCORING_TYPE as A_SCORING_TYPE, 
    A.ATY_TIME as A_ATY_TIME, A.ENABLED_CHECH as A_ENABLED_CHECH, A.ANSWER_ORDER as A_ANSWER_ORDER, 
    A.DISPLAY_SCORE as A_DISPLAY_SCORE, A.DISPLAY_ORDER as A_DISPLAY_ORDER, A.ANSWER_DISPLAY_ORDER as A_ANSWER_DISPLAY_ORDER, 
    A.DISPLAY_ANSWER as A_DISPLAY_ANSWER, A.DISPLAY_OBJECTIVE_SCORE as A_DISPLAY_OBJECTIVE_SCORE, 
    A.DISPLAY_QUESTION_NUMBER as A_DISPLAY_QUESTION_NUMBER, A.ENABLED_CUT_SCREEN as A_ENABLED_CUT_SCREEN, 
    A.CUT_SCREEN_TIMES as A_CUT_SCREEN_TIMES, A.ATY_RESTRAINT as A_ATY_RESTRAINT, A.ATY_RESTRAINT_TIMES as A_ATY_RESTRAINT_TIMES, 
    A.REEXAM_TIME_INTERVAL as A_REEXAM_TIME_INTERVAL, A.REEXAM_TIMES as A_REEXAM_TIMES, 
    A.REQUIRED_ANSWER_COUNT as A_REQUIRED_ANSWER_COUNT, A.ENABLED_FEEDBACK as A_ENABLED_FEEDBACK, 
    A.RESTRICT_IP as A_RESTRICT_IP, A.SAVING_IP as A_SAVING_IP, A.WARNING_TIME as A_WARNING_TIME, 
    A.WARNING_TEXT as A_WARNING_TEXT, A.REMARKS as A_REMARKS, A.RECORD_STATUS as A_RECORD_STATUS, 
    A.UPDATE_COUNT as A_UPDATE_COUNT, A.CREATOR_ID as A_CREATOR_ID, A.CREATE_DATE as A_CREATE_DATE, 
    A.UPDATER_ID as A_UPDATER_ID, A.UPDATE_DATE as A_UPDATE_DATE, A.PUBLISH_STATUS as A_PUBLISH_STATUS,
    A.ADVANCE_TIME as A_ADVANCE_TIME, A.OVERDUE_TIME as A_OVERDUE_TIME,A.MARKING_CHECK as A_MARKING_CHECK,
    A.PASS_SCORE as A_PASS_SCORE
  </sql>
  <select id="findByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
    <!--
      WARNING - @关联EXM_EXAM_PAPER表进行查询
    -->
    select
    <include refid="Base_Column_List" />,B.NAME AS PAPER_NAME
     from ATY_EXAMINATION A LEFT JOIN EXM_EXAM_PAPER B ON A.ATY_PAPER_ID = B.ID
     <if test="params.folderId != null" >
       inner join ATY_FOLDER_HIERARCHY M on A.FOLDER_ID = M.FOLDER_ID and M.HIERARCHY_ID = #{params.folderId,jdbcType=DECIMAL} and M.RECORD_STATUS = 'A'
     </if>
    <if test="_parameter != null">
      <where><include refid="Global.Where_Clause" /></where>
    </if>
    <if test="hasOrderBy">
      order by
      <foreach collection="orderBys" item="orderBy" separator=",">
        ${orderBy}
      </foreach>
    </if>
  </select>
  <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @关联EXM_EXAM_PAPER表进行查询
    -->
    select 
    <include refid="Base_Column_List" />,B.NAME AS PAPER_NAME
     from ATY_EXAMINATION A LEFT JOIN EXM_EXAM_PAPER B ON A.ATY_PAPER_ID = B.ID
    where A.ID = #{id,jdbcType=DECIMAL}
  </select>
  
  <select id="countAuswertungExaminationByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!--
      WARNING - @自定义，查询可以阅卷的考试活动
    -->
	 select count(*) from (select A.ID id,A.Name name,max(B.Times) times from aty_examination A 
       left join aty_examinees_history B on A.ID = B.examination_id
       left join ATY_ENROLL_EXAM_WORKER C on B.examination_id = C.activity_id
		where #{params.userId,jdbcType=DECIMAL} in (select user_id from ATY_ENROLL_EXAM_WORKER where work_type = 'M' and RECORD_STATUS = 'A') and B.Status = 'E'
		  and A.RECORD_STATUS = 'A' 
		  and B.RECORD_STATUS = 'A'
		  and C.RECORD_STATUS = 'A'
		  group by A.Id,A.Name)
  </select>
  
  <select id="findAuswertungExaminationByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="com.kingnod.etraining.activity.entity.Examination">
    <!--
      WARNING - @自定义，查询可以阅卷的考试活动
    -->
	 select A.ID id,A.Name name,max(B.Times) times from aty_examination A 
       left join aty_examinees_history B on A.ID = B.examination_id
       left join ATY_ENROLL_EXAM_WORKER C on B.examination_id = C.activity_id
		where #{params.userId,jdbcType=DECIMAL} in (select user_id from ATY_ENROLL_EXAM_WORKER where work_type = 'M' and RECORD_STATUS = 'A') and B.Status = 'E'
		  and A.RECORD_STATUS = 'A' 
		  and B.RECORD_STATUS = 'A'
		  and C.RECORD_STATUS = 'A'
		  group by A.Id,A.Name
  </select>
  
  <select id="findExaminationById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--   WARNING - @自定义  update liuxiaobin     -->
    select 
    <include refid="Base_Column_List" />
     from ATY_EXAMINATION A
    where A.ID = #{id,jdbcType=DECIMAL}
  </select>
  
  <delete id="deleteById" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
    delete from ATY_EXAMINATION
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByCriteria" parameterType="com.kingnod.core.criteria.Criteria">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
    delete A from ATY_EXAMINATION A
    <if test="_parameter != null">
      <where><include refid="Global.Where_Clause" /></where>
    </if>
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
  </delete>
  <insert id="insert" parameterType="com.kingnod.etraining.activity.entity.Examination">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into ATY_EXAMINATION ( FOLDER_ID, ATY_PAPER_ID, 
      NAME, OPEN_TIME, CLOSE_TIME, 
      SCORING_TYPE, ATY_TIME, ENABLED_CHECH, 
      ANSWER_ORDER, DISPLAY_SCORE, DISPLAY_ORDER, 
      ANSWER_DISPLAY_ORDER, DISPLAY_ANSWER, DISPLAY_OBJECTIVE_SCORE, 
      DISPLAY_QUESTION_NUMBER, ENABLED_CUT_SCREEN, CUT_SCREEN_TIMES, 
      ATY_RESTRAINT, ATY_RESTRAINT_TIMES, REEXAM_TIME_INTERVAL, 
      REEXAM_TIMES, REQUIRED_ANSWER_COUNT, ENABLED_FEEDBACK, 
      RESTRICT_IP, SAVING_IP, WARNING_TIME, 
      WARNING_TEXT, REMARKS, RECORD_STATUS, 
      UPDATE_COUNT, CREATOR_ID, CREATE_DATE, 
      UPDATER_ID, UPDATE_DATE, PUBLISH_STATUS, ADVANCE_TIME, OVERDUE_TIME, MARKING_CHECK, PASS_SCORE)
    values (  #{folderId,jdbcType=DECIMAL}, #{atyPaperId,jdbcType=DECIMAL}, 
      #{name,jdbcType=VARCHAR}, #{openTime,jdbcType=TIMESTAMP}, #{closeTime,jdbcType=TIMESTAMP}, 
      #{scoringType,jdbcType=CHAR}, #{atyTime,jdbcType=DECIMAL}, #{enabledChech,jdbcType=CHAR}, 
      #{answerOrder,jdbcType=CHAR}, #{displayScore,jdbcType=CHAR}, #{displayOrder,jdbcType=CHAR}, 
      #{answerDisplayOrder,jdbcType=CHAR}, #{displayAnswer,jdbcType=CHAR}, #{displayObjectiveScore,jdbcType=CHAR}, 
      #{displayQuestionNumber,jdbcType=VARCHAR}, #{enabledCutScreen,jdbcType=CHAR}, #{cutScreenTimes,jdbcType=DECIMAL}, 
      #{atyRestraint,jdbcType=CHAR}, #{atyRestraintTimes,jdbcType=DECIMAL}, #{reexamTimeInterval,jdbcType=DECIMAL}, 
      #{reexamTimes,jdbcType=DECIMAL}, #{requiredAnswerCount,jdbcType=DECIMAL}, #{enabledFeedback,jdbcType=CHAR}, 
      #{restrictIp,jdbcType=CHAR}, #{savingIp,jdbcType=CHAR}, #{warningTime,jdbcType=DECIMAL}, 
      #{warningText,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, #{recordStatus,jdbcType=CHAR}, 
      #{updateCount,jdbcType=DECIMAL}, #{creatorId,jdbcType=DECIMAL}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updaterId,jdbcType=DECIMAL}, #{updateDate,jdbcType=TIMESTAMP}, #{publishStatus,jdbcType=CHAR},
      #{advanceTime,jdbcType=DECIMAL}, #{overdueTime,jdbcType=DECIMAL}, #{markingCheck,jdbcType=CHAR}, #{passScore,jdbcType=DECIMAL})
  </insert>
  <select id="countByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!--
      WARNING - @自定义
    -->
    select count(A.ID) from ATY_EXAMINATION A LEFT JOIN EXM_EXAM_PAPER B ON A.ATY_PAPER_ID = B.ID
    <if test="params.folderId != null" >
       inner join ATY_FOLDER_HIERARCHY M on A.FOLDER_ID = M.FOLDER_ID and M.HIERARCHY_ID = #{params.folderId,jdbcType=DECIMAL} and M.RECORD_STATUS = 'A'
     </if>
    <if test="_parameter != null">
      <where><include refid="Global.Where_Clause" /></where>
    </if>
  </select>
  <update id="updateByCriteria" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
    update ATY_EXAMINATION A
    <set>
      <if test="record.id != null">
        A.ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.folderId != null">
        A.FOLDER_ID = #{record.folderId,jdbcType=DECIMAL},
      </if>
      <if test="record.atyPaperId != null">
        A.ATY_PAPER_ID = #{record.atyPaperId,jdbcType=DECIMAL},
      </if>
      <if test="record.name != null">
        A.NAME = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.openTime != null">
        A.OPEN_TIME = #{record.openTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.closeTime != null">
        A.CLOSE_TIME = #{record.closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.scoringType != null">
        A.SCORING_TYPE = #{record.scoringType,jdbcType=CHAR},
      </if>
      <if test="record.atyTime != null">
        A.ATY_TIME = #{record.atyTime,jdbcType=DECIMAL},
      </if>
      <if test="record.enabledChech != null">
        A.ENABLED_CHECH = #{record.enabledChech,jdbcType=CHAR},
      </if>
      <if test="record.answerOrder != null">
        A.ANSWER_ORDER = #{record.answerOrder,jdbcType=CHAR},
      </if>
      <if test="record.displayScore != null">
        A.DISPLAY_SCORE = #{record.displayScore,jdbcType=CHAR},
      </if>
      <if test="record.displayOrder != null">
        A.DISPLAY_ORDER = #{record.displayOrder,jdbcType=CHAR},
      </if>
      <if test="record.answerDisplayOrder != null">
        A.ANSWER_DISPLAY_ORDER = #{record.answerDisplayOrder,jdbcType=CHAR},
      </if>
      <if test="record.displayAnswer != null">
        A.DISPLAY_ANSWER = #{record.displayAnswer,jdbcType=CHAR},
      </if>
      <if test="record.displayObjectiveScore != null">
        A.DISPLAY_OBJECTIVE_SCORE = #{record.displayObjectiveScore,jdbcType=CHAR},
      </if>
      <if test="record.displayQuestionNumber != null">
        A.DISPLAY_QUESTION_NUMBER = #{record.displayQuestionNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.enabledCutScreen != null">
        A.ENABLED_CUT_SCREEN = #{record.enabledCutScreen,jdbcType=CHAR},
      </if>
      <if test="record.cutScreenTimes != null">
        A.CUT_SCREEN_TIMES = #{record.cutScreenTimes,jdbcType=DECIMAL},
      </if>
      <if test="record.atyRestraint != null">
        A.ATY_RESTRAINT = #{record.atyRestraint,jdbcType=CHAR},
      </if>
      <if test="record.atyRestraintTimes != null">
        A.ATY_RESTRAINT_TIMES = #{record.atyRestraintTimes,jdbcType=DECIMAL},
      </if>
      <if test="record.reexamTimeInterval != null">
        A.REEXAM_TIME_INTERVAL = #{record.reexamTimeInterval,jdbcType=DECIMAL},
      </if>
      <if test="record.reexamTimes != null">
        A.REEXAM_TIMES = #{record.reexamTimes,jdbcType=DECIMAL},
      </if>
      <if test="record.requiredAnswerCount != null">
        A.REQUIRED_ANSWER_COUNT = #{record.requiredAnswerCount,jdbcType=DECIMAL},
      </if>
      <if test="record.enabledFeedback != null">
        A.ENABLED_FEEDBACK = #{record.enabledFeedback,jdbcType=CHAR},
      </if>
      <if test="record.restrictIp != null">
        A.RESTRICT_IP = #{record.restrictIp,jdbcType=CHAR},
      </if>
      <if test="record.savingIp != null">
        A.SAVING_IP = #{record.savingIp,jdbcType=CHAR},
      </if>
      <if test="record.warningTime != null">
        A.WARNING_TIME = #{record.warningTime,jdbcType=DECIMAL},
      </if>
      <if test="record.warningText != null">
        A.WARNING_TEXT = #{record.warningText,jdbcType=VARCHAR},
      </if>
      <if test="record.remarks != null">
        A.REMARKS = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.recordStatus != null">
        A.RECORD_STATUS = #{record.recordStatus,jdbcType=CHAR},
      </if>
      <if test="record.updateCount != null">
        A.UPDATE_COUNT = #{record.updateCount,jdbcType=DECIMAL},
      </if>
      <if test="record.creatorId != null">
        A.CREATOR_ID = #{record.creatorId,jdbcType=DECIMAL},
      </if>
      <if test="record.createDate != null">
        A.CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updaterId != null">
        A.UPDATER_ID = #{record.updaterId,jdbcType=DECIMAL},
      </if>
      <if test="record.updateDate != null">
        A.UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.publishStatus != null">
        A.PUBLISH_STATUS = #{record.publishStatus,jdbcType=CHAR},
      </if>
      <if test="record.advanceTime != null">
        A.ADVANCE_TIME = #{record.advanceTime,jdbcType=DECIMAL},
      </if>
      <if test="record.overdueTime != null">
        A.OVERDUE_TIME = #{record.overdueTime,jdbcType=DECIMAL},
      </if>
      <if test="record.markingCheck != null">
        A.MARKING_CHECK = #{record.markingCheck,jdbcType=CHAR},
      </if>
      <if test="record.passScore != null">
        A.PASS_SCORE = #{record.passScore,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <where><include refid="Global.Where_Clause" /></where>
    </if>
  </update>
  <update id="update" parameterType="com.kingnod.etraining.activity.entity.Examination">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-10 16:50.
    -->
    update ATY_EXAMINATION A
    <set>
      <if test="id != null">
        A.ID = #{id,jdbcType=DECIMAL},
      </if>
      <if test="folderId != null">
        A.FOLDER_ID = #{folderId,jdbcType=DECIMAL},
      </if>
      <if test="atyPaperId != null">
        A.ATY_PAPER_ID = #{atyPaperId,jdbcType=DECIMAL},
      </if>
      <if test="name != null">
        A.NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="openTime != null">
        A.OPEN_TIME = #{openTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null">
        A.END_TIME = #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="scoringType != null">
        A.SCORING_TYPE = #{scoringType,jdbcType=CHAR},
      </if>
      <if test="atyTime != null">
        A.ATY_TIME = #{atyTime,jdbcType=DECIMAL},
      </if>
      <if test="enabledChech != null">
        A.ENABLED_CHECH = #{enabledChech,jdbcType=CHAR},
      </if>
      <if test="answerOrder != null">
        A.ANSWER_ORDER = #{answerOrder,jdbcType=CHAR},
      </if>
      <if test="displayScore != null">
        A.DISPLAY_SCORE = #{displayScore,jdbcType=CHAR},
      </if>
      <if test="displayOrder != null">
        A.DISPLAY_ORDER = #{displayOrder,jdbcType=CHAR},
      </if>
      <if test="answerDisplayOrder != null">
        A.ANSWER_DISPLAY_ORDER = #{answerDisplayOrder,jdbcType=CHAR},
      </if>
      <if test="displayAnswer != null">
        A.DISPLAY_ANSWER = #{displayAnswer,jdbcType=CHAR},
      </if>
      <if test="displayObjectiveScore != null">
        A.DISPLAY_OBJECTIVE_SCORE = #{displayObjectiveScore,jdbcType=CHAR},
      </if>
      <if test="displayQuestionNumber != null">
        A.DISPLAY_QUESTION_NUMBER = #{displayQuestionNumber,jdbcType=VARCHAR},
      </if>
      <if test="enabledCutScreen != null">
        A.ENABLED_CUT_SCREEN = #{enabledCutScreen,jdbcType=CHAR},
      </if>
      <if test="cutScreenTimes != null">
        A.CUT_SCREEN_TIMES = #{cutScreenTimes,jdbcType=DECIMAL},
      </if>
      <if test="atyRestraint != null">
        A.ATY_RESTRAINT = #{atyRestraint,jdbcType=CHAR},
      </if>
      <if test="atyRestraintTimes != null">
        A.ATY_RESTRAINT_TIMES = #{atyRestraintTimes,jdbcType=DECIMAL},
      </if>
      <if test="reexamTimeInterval != null">
        A.REEXAM_TIME_INTERVAL = #{reexamTimeInterval,jdbcType=DECIMAL},
      </if>
      <if test="reexamTimes != null">
        A.REEXAM_TIMES = #{reexamTimes,jdbcType=DECIMAL},
      </if>
      <if test="requiredAnswerCount != null">
        A.REQUIRED_ANSWER_COUNT = #{requiredAnswerCount,jdbcType=DECIMAL},
      </if>
      <if test="enabledFeedback != null">
        A.ENABLED_FEEDBACK = #{enabledFeedback,jdbcType=CHAR},
      </if>
      <if test="restrictIp != null">
        A.RESTRICT_IP = #{restrictIp,jdbcType=CHAR},
      </if>
      <if test="savingIp != null">
        A.SAVING_IP = #{savingIp,jdbcType=CHAR},
      </if>
      <if test="warningTime != null">
        A.WARNING_TIME = #{warningTime,jdbcType=DECIMAL},
      </if>
      <if test="warningText != null">
        A.WARNING_TEXT = #{warningText,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        A.REMARKS = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="recordStatus != null">
        A.RECORD_STATUS = #{recordStatus,jdbcType=CHAR},
      </if>
      <if test="updateCount != null">
        A.UPDATE_COUNT = #{updateCount,jdbcType=DECIMAL},
      </if>
      <if test="creatorId != null">
        A.CREATOR_ID = #{creatorId,jdbcType=DECIMAL},
      </if>
      <if test="createDate != null">
        A.CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updaterId != null">
        A.UPDATER_ID = #{updaterId,jdbcType=DECIMAL},
      </if>
      <if test="updateDate != null">
        A.UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="publishStatus != null">
        A.PUBLISH_STATUS = #{publishStatus,jdbcType=CHAR},
      </if>
      <if test="advanceTime != null">
        A.ADVANCE_TIME = #{advanceTime,jdbcType=DECIMAL},
      </if>
      <if test="overdueTime != null">
        A.OVERDUE_TIME = #{overdueTime,jdbcType=DECIMAL},
      </if>
      <if test="markingCheck != null">
        A.MARKING_CHECK = #{markingCheck,jdbcType=CHAR},
      </if>
      <if test="passScore != null">
        A.PASS_SCORE = #{passScore,jdbcType=DECIMAL},
      </if>
    </set>
    where A.ID = #{id,jdbcType=DECIMAL}
  </update>
  
  <select id="findUserByExaminationInfo" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
  	<!-- WARNING - @自定义  -->
	select <include refid="Base_Column_List" />
	from ATY_ENROLL_LEARNER B 
		left join ATY_EXAMINATION A on A.ID = B.ACTIVITY_ID AND B.ACTIVITY_TYPE = 'A_XN'
		left join ATY_PERIOD D ON A.ID = D.FLAG_ID and B.ACTIVITY_TYPE = D.FLAG_TYPE
	where B.RECORD_STATUS = 'A' AND A.RECORD_STATUS = 'A' 
		and A.PUBLISH_STATUS = 'R' 
		and B.USER_ID = #{params.userId,jdbcType=DECIMAL} AND B.EXCLUDED = '0'
		and IFNULL(d.start_date, #{params.currentDate}-1) &lt;= #{params.currentDate}
        and IFNULL(d.end_date, #{params.currentDate})+1 &gt; #{params.currentDate}
        and A.REEXAM_TIMES > (
        	select count(ID) from ATY_EXAMINEES_HISTORY 
        	where EXAMINATION_ID = A.ID and USER_ID = #{params.userId,jdbcType=DECIMAL} 
        	and STATUS != 'S' and RECORD_STATUS = 'A'
        )
    <if test="hasOrderBy">
      order by
      <foreach collection="orderBys" item="orderBy" separator=",">
        ${orderBy}
      </foreach>
    </if>
  </select>
  <select id="countUserByExaminationInfo" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
  	<!-- WARNING - @自定义  -->
	count(A.ID)
	from ATY_ENROLL_LEARNER B 
		left join ATY_EXAMINATION A on A.ID = B.ACTIVITY_ID AND B.ACTIVITY_TYPE = 'A_XN'
		left join ATY_PERIOD D ON A.ID = D.FLAG_ID and B.ACTIVITY_TYPE = D.FLAG_TYPE
	where B.RECORD_STATUS = 'A' AND A.RECORD_STATUS = 'A' 
		and A.PUBLISH_STATUS = 'R' 
		and B.USER_ID = #{params.userId,jdbcType=DECIMAL} AND B.EXCLUDED = '0'
		and IFNULL(d.start_date, #{params.currentDate}-1) &lt;= #{params.currentDate}
        and IFNULL(d.end_date, #{params.currentDate})+1 &gt; #{params.currentDate}
        and A.REEXAM_TIMES > (
        	select count(ID) from ATY_EXAMINEES_HISTORY 
        	where EXAMINATION_ID = A.ID and USER_ID = #{params.userId,jdbcType=DECIMAL} 
        	and STATUS != 'S' and RECORD_STATUS = 'A'
        )
    <if test="hasOrderBy">
      order by
      <foreach collection="orderBys" item="orderBy" separator=",">
        ${orderBy}
      </foreach>
    </if>
  </select>
  <select id="findFolderName_examination" parameterType="java.lang.Long" resultType="java.lang.String">
  	<!-- WARNING - @自定义  查询 folderName（文件夹名称）-->
  	SELECT A.NAME FROM ATY_FOLDER A WHERE A.ID = #{id,jdbcType=DECIMAL}
  </select>
  
  <select id="findAlreadyExamByUserId" parameterType="com.kingnod.core.criteria.Criteria" resultType="com.kingnod.etraining.activity.entity.Examination">
  	<!-- WARNING - @ 根据userId，查询已完成考试-->
	SELECT 
	   B.NAME name,
	   B.SCORING_TYPE scoringType,
	   C.NAME paperName,
       C.TOTAL_SCORE paperTotalScore,
       A.EXAMED_TIMES examedTimes,
       B.REEXAM_TIMES reexamTimes,
       A.USER_ID userId,
       A.EXAMINATION_ID id,
       A.ATY_PAPER_ID atyPaperId
  FROM (SELECT EXAMINATION_ID, USER_ID, ATY_PAPER_ID, COUNT(*) EXAMED_TIMES
          FROM ATY_EXAMINEES_HISTORY
         WHERE RECORD_STATUS = 'A'
           AND STATUS &lt;&gt; 'S'
           AND USER_ID = #{params.userId,jdbcType=DECIMAL}
         GROUP BY EXAMINATION_ID, USER_ID, ATY_PAPER_ID
         ORDER BY EXAMINATION_ID) A,
       (SELECT AE.ID,
               AE.REEXAM_TIMES,
               AE.NAME,
               AE.SCORING_TYPE,
               (SELECT END_DATE
                  FROM ATY_PERIOD
                 WHERE FLAG_ID = AE.ID
                   AND FLAG_TYPE = 'X'
                   AND RECORD_STATUS = 'A') END_DATE
          FROM ATY_EXAMINATION AE
         WHERE AE.RECORD_STATUS = 'A'
           AND AE.PUBLISH_STATUS = 'R') B,
       EXM_EXAM_PAPER C
 WHERE A.EXAMINATION_ID = B.ID
   AND A.ATY_PAPER_ID = C.ID
   AND (A.EXAMED_TIMES = B.REEXAM_TIMES OR
       (B.END_DATE IS NOT NULL AND B.END_DATE &lt; SYSDATE))
  </select>
    
  <select id="countAlreadyExamByUserId" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
  	<!-- WARNING - @ 根据userId，查询已完成考试记录数-->
  	SELECT count(a.EXAMINATION_ID)
  FROM (SELECT EXAMINATION_ID, USER_ID, ATY_PAPER_ID, COUNT(*) EXAMED_TIMES
          FROM ATY_EXAMINEES_HISTORY
         WHERE RECORD_STATUS = 'A'
           AND STATUS &lt;&gt; 'S'
           AND USER_ID = #{params.userId,jdbcType=DECIMAL}
         GROUP BY EXAMINATION_ID, USER_ID, ATY_PAPER_ID
         ORDER BY EXAMINATION_ID) A,
       (SELECT AE.ID,
               AE.REEXAM_TIMES,
               AE.NAME,
               (SELECT END_DATE
                  FROM ATY_PERIOD
                 WHERE FLAG_ID = AE.ID
                   AND FLAG_TYPE = 'X'
                   AND RECORD_STATUS = 'A') END_DATE
          FROM ATY_EXAMINATION AE
         WHERE AE.RECORD_STATUS = 'A'
           AND AE.PUBLISH_STATUS = 'R') B,
       EXM_EXAM_PAPER C
 WHERE A.EXAMINATION_ID = B.ID
   AND A.ATY_PAPER_ID = C.ID
   AND (A.EXAMED_TIMES = B.REEXAM_TIMES OR
       (B.END_DATE IS NOT NULL AND B.END_DATE &lt; SYSDATE))
  </select>
  
  
</mapper>