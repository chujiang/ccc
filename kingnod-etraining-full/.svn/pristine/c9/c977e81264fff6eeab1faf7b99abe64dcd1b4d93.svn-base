<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ExamineeQuestion">
  <resultMap id="BaseResultMap" type="com.kingnod.etraining.exam.entity.ExamineeQuestion">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    <id column="A_ID" jdbcType="DECIMAL" property="id" />
    <result column="A_EXAM_PAPER_ID" jdbcType="DECIMAL" property="examPaperId" />
    <result column="A_USER_ID" jdbcType="DECIMAL" property="userId" />
    <result column="A_QUESTION_ID" jdbcType="DECIMAL" property="questionId" />
    <result column="A_QUESTION_SEQ" jdbcType="DECIMAL" property="questionSeq" />
    <result column="A_DEGREE" jdbcType="DECIMAL" property="degree" />
    <result column="A_DESERVED_SCORE" jdbcType="DECIMAL" property="deservedScore" />
    <result column="A_EXAMINEE_ANSWER" jdbcType="VARCHAR" property="examineeAnswer" />
    <result column="A_EXAMINEE_ANSWER1" jdbcType="VARCHAR" property="examineeAnswer1" />
    <result column="A_EXAMINEE_ANSWER2" jdbcType="VARCHAR" property="examineeAnswer2" />
    <result column="A_EXAMINEE_ANSWER3" jdbcType="VARCHAR" property="examineeAnswer3" />
    <result column="A_EXAMINEE_ANSWER4" jdbcType="VARCHAR" property="examineeAnswer4" />
    <result column="A_REVIEWED" jdbcType="CHAR" property="reviewed" />
    <result column="A_EXAM_NUMBER" jdbcType="DECIMAL" property="examNumber" />
    <result column="A_SCORE" jdbcType="DECIMAL" property="score" />
    <result column="A_CORRECT_ANSWERS" jdbcType="VARCHAR" property="correctAnswers" />
    <result column="A_VIEW_PERSON" jdbcType="DECIMAL" property="viewPerson" />
    <result column="A_VIEW_SCORE" jdbcType="DECIMAL" property="viewScore" />
    <result column="A_APPROVE_PERSON" jdbcType="DECIMAL" property="approvePerson" />
    <result column="A_APPROVE_SCORE" jdbcType="DECIMAL" property="approveScore" />
    <result column="A_APPROVE_IDEAS" jdbcType="VARCHAR" property="approveIdeas" />
    <result column="A_CHECK_PERSON" jdbcType="DECIMAL" property="checkPerson" />
    <result column="A_CHECK_IDEAS" jdbcType="VARCHAR" property="checkIdeas" />
    <result column="A_STATUS" jdbcType="CHAR" property="status" />
    <result column="A_RECORD_STATUS" jdbcType="CHAR" property="recordStatus" />
    <result column="A_UPDATE_COUNT" jdbcType="DECIMAL" property="updateCount" />
    <result column="A_CREATOR_ID" jdbcType="DECIMAL" property="creatorId" />
    <result column="A_CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
    <result column="A_UPDATER_ID" jdbcType="DECIMAL" property="updaterId" />
    <result column="A_UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="A_EXAMINATION_ID" jdbcType="DECIMAL" property="examinationId" />
    <result column="A_PARENT_ID" jdbcType="DECIMAL" property="parentId" />
    <result column="A_RULE_ID" jdbcType="DECIMAL" property="ruleId" />
    <result column="A_APPROVE_SCORE" jdbcType="DECIMAL" property="approveScore" />
    <result column="A_QUESTION_TYPE" jdbcType="CHAR" property="questionType" />
    <result column="A_TEST_GROUP_ID" jdbcType="DECIMAL" property="testGroupId" />
    <association column="A_EXAMINATION_ID" property="examination" select="Examination.findById" />
    <association column="A_USER_ID" property="user" select="User.findById" />
    <association column="A_QUESTION_ID" property="question" select="Question.findById" />
    <association column="A_EXAM_PAPER_ID" property="paper" select="Paper.findById" />
    <collection column="A_QUESTION_ID" property="questionAnswers" select="QuestionAnswer.findListByExamineeAnswer" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    A.ID as A_ID, A.EXAM_PAPER_ID as A_EXAM_PAPER_ID, A.EXAMINATION_ID as A_EXAMINATION_ID, A.PARENT_ID as A_PARENT_ID,
    A.USER_ID as A_USER_ID, A.QUESTION_ID as A_QUESTION_ID, 
    A.QUESTION_SEQ as A_QUESTION_SEQ, A.DEGREE as A_DEGREE, A.DESERVED_SCORE as A_DESERVED_SCORE, 
    A.EXAMINEE_ANSWER as A_EXAMINEE_ANSWER, A.EXAMINEE_ANSWER1 as A_EXAMINEE_ANSWER1, 
    A.EXAMINEE_ANSWER2 as A_EXAMINEE_ANSWER2, A.EXAMINEE_ANSWER3 as A_EXAMINEE_ANSWER3, 
    A.EXAMINEE_ANSWER4 as A_EXAMINEE_ANSWER4, A.REVIEWED as A_REVIEWED, A.EXAM_NUMBER as A_EXAM_NUMBER, 
    A.SCORE as A_SCORE, A.CORRECT_ANSWERS as A_CORRECT_ANSWERS, A.VIEW_PERSON as A_VIEW_PERSON, 
    A.VIEW_SCORE as A_VIEW_SCORE, A.APPROVE_PERSON as A_APPROVE_PERSON, A.APPROVE_SCORE as A_APPROVE_SCORE, A.APPROVE_IDEAS as A_APPROVE_IDEAS, 
    A.CHECK_PERSON as A_CHECK_PERSON, A.CHECK_IDEAS as A_CHECK_IDEAS, A.STATUS as A_STATUS, 
    A.RECORD_STATUS as A_RECORD_STATUS, A.UPDATE_COUNT as A_UPDATE_COUNT, A.CREATOR_ID as A_CREATOR_ID, 
    A.CREATE_DATE as A_CREATE_DATE, A.UPDATER_ID as A_UPDATER_ID, A.UPDATE_DATE as A_UPDATE_DATE,
    A.EXAMINATION_ID as A_EXAMINATION_ID, A.PARENT_ID as A_PARENT_ID, A.RULE_ID as A_RULE_ID, 
    A.APPROVE_SCORE as A_APPROVE_SCORE, A.QUESTION_TYPE as A_QUESTION_TYPE, A.TEST_GROUP_ID as A_TEST_GROUP_ID
  </sql>
  <select id="findByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    select
    <include refid="Base_Column_List" />
     from EXM_EXAMINEE_QUESTION A
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
      </where>
    </if>
    <if test="hasOrderBy">
      order by
      <foreach collection="orderBys" item="orderBy" separator=",">
        ${orderBy}
      </foreach>
    </if>
  </select>
  <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    select 
    <include refid="Base_Column_List" />
    from EXM_EXAMINEE_QUESTION A
    where A.ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteById" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    delete from EXM_EXAMINEE_QUESTION
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByCriteria" parameterType="com.kingnod.core.criteria.Criteria">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    delete from EXM_EXAMINEE_QUESTION A
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
      </where>
    </if>
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
  </delete>
  <insert id="insert" parameterType="com.kingnod.etraining.exam.entity.ExamineeQuestion">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      select EXM_EXAMINEE_QUESTION_SEQ.nextval from dual
    </selectKey>
    insert into EXM_EXAMINEE_QUESTION (ID, EXAM_PAPER_ID, USER_ID, 
      QUESTION_ID, QUESTION_SEQ, DEGREE, 
      DESERVED_SCORE, EXAMINEE_ANSWER, EXAMINEE_ANSWER1, 
      EXAMINEE_ANSWER2, EXAMINEE_ANSWER3, EXAMINEE_ANSWER4, 
      REVIEWED, EXAM_NUMBER, SCORE, 
      CORRECT_ANSWERS, VIEW_PERSON, VIEW_SCORE, 
      APPROVE_PERSON, APPROVE_IDEAS, CHECK_PERSON, 
      CHECK_IDEAS, STATUS, RECORD_STATUS, 
      UPDATE_COUNT, CREATOR_ID, CREATE_DATE, 
      UPDATER_ID, UPDATE_DATE, EXAMINATION_ID, 
      PARENT_ID, RULE_ID, APPROVE_SCORE, 
      QUESTION_TYPE, TEST_GROUP_ID)
    values (#{id,jdbcType=DECIMAL}, #{examPaperId,jdbcType=DECIMAL}, #{userId,jdbcType=DECIMAL}, 
      #{questionId,jdbcType=DECIMAL}, #{questionSeq,jdbcType=DECIMAL}, #{degree,jdbcType=DECIMAL}, 
      #{deservedScore,jdbcType=DECIMAL}, #{examineeAnswer,jdbcType=VARCHAR}, #{examineeAnswer1,jdbcType=VARCHAR}, 
      #{examineeAnswer2,jdbcType=VARCHAR}, #{examineeAnswer3,jdbcType=VARCHAR}, #{examineeAnswer4,jdbcType=VARCHAR}, 
      #{reviewed,jdbcType=CHAR}, #{examNumber,jdbcType=DECIMAL}, #{score,jdbcType=DECIMAL}, 
      #{correctAnswers,jdbcType=VARCHAR}, #{viewPerson,jdbcType=DECIMAL}, #{viewScore,jdbcType=DECIMAL}, 
      #{approvePerson,jdbcType=DECIMAL}, #{approveIdeas,jdbcType=VARCHAR}, #{checkPerson,jdbcType=DECIMAL}, 
      #{checkIdeas,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, #{recordStatus,jdbcType=CHAR}, 
      #{updateCount,jdbcType=DECIMAL}, #{creatorId,jdbcType=DECIMAL}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updaterId,jdbcType=DECIMAL}, #{updateDate,jdbcType=TIMESTAMP}, #{examinationId,jdbcType=DECIMAL}, 
      #{parentId,jdbcType=DECIMAL}, #{ruleId,jdbcType=DECIMAL}, #{approveScore,jdbcType=DECIMAL}, 
      #{questionType,jdbcType=CHAR}, #{testGroupId,jdbcType=DECIMAL})
  </insert>
  <select id="countByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    select count(ID) from EXM_EXAMINEE_QUESTION A
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
      </where>
    </if>
  </select>
  <update id="updateByCriteria" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    update EXM_EXAMINEE_QUESTION A
    <set>
      <if test="record.id != null">
        A.ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.examPaperId != null">
        A.EXAM_PAPER_ID = #{record.examPaperId,jdbcType=DECIMAL},
      </if>
      <if test="record.userId != null">
        A.USER_ID = #{record.userId,jdbcType=DECIMAL},
      </if>
      <if test="record.parentId != null">
        A.PARENT_ID = #{record.parentId,jdbcType=DECIMAL},
      </if>
      <if test="record.questionId != null">
        A.QUESTION_ID = #{record.questionId,jdbcType=DECIMAL},
      </if>
      <if test="record.questionSeq != null">
        A.QUESTION_SEQ = #{record.questionSeq,jdbcType=DECIMAL},
      </if>
      <if test="record.degree != null">
        A.DEGREE = #{record.degree,jdbcType=DECIMAL},
      </if>
      <if test="record.deservedScore != null">
        A.DESERVED_SCORE = #{record.deservedScore,jdbcType=DECIMAL},
      </if>
      <if test="record.examineeAnswer != null">
        A.EXAMINEE_ANSWER = #{record.examineeAnswer,jdbcType=VARCHAR},
      </if>
      <if test="record.examineeAnswer1 != null">
        A.EXAMINEE_ANSWER1 = #{record.examineeAnswer1,jdbcType=VARCHAR},
      </if>
      <if test="record.examineeAnswer2 != null">
        A.EXAMINEE_ANSWER2 = #{record.examineeAnswer2,jdbcType=VARCHAR},
      </if>
      <if test="record.examineeAnswer3 != null">
        A.EXAMINEE_ANSWER3 = #{record.examineeAnswer3,jdbcType=VARCHAR},
      </if>
      <if test="record.examineeAnswer4 != null">
        A.EXAMINEE_ANSWER4 = #{record.examineeAnswer4,jdbcType=VARCHAR},
      </if>
      <if test="record.reviewed != null">
        A.REVIEWED = #{record.reviewed,jdbcType=CHAR},
      </if>
      <if test="record.examNumber != null">
        A.EXAM_NUMBER = #{record.examNumber,jdbcType=DECIMAL},
      </if>
      <if test="record.score != null">
        A.SCORE = #{record.score,jdbcType=DECIMAL},
      </if>
      <if test="record.correctAnswers != null">
        A.CORRECT_ANSWERS = #{record.correctAnswers,jdbcType=VARCHAR},
      </if>
      <if test="record.viewPerson != null">
        A.VIEW_PERSON = #{record.viewPerson,jdbcType=DECIMAL},
      </if>
      <if test="record.viewScore != null">
        A.VIEW_SCORE = #{record.viewScore,jdbcType=DECIMAL},
      </if>
      <if test="record.approvePerson != null">
        A.APPROVE_PERSON = #{record.approvePerson,jdbcType=DECIMAL},
      </if>
      <if test="record.approveScore != null">
        A.APPROVE_SCORE = #{record.approveScore,jdbcType=DECIMAL},
      </if>
      <if test="record.approveIdeas != null">
        A.APPROVE_IDEAS = #{record.approveIdeas,jdbcType=VARCHAR},
      </if>
      <if test="record.checkPerson != null">
        A.CHECK_PERSON = #{record.checkPerson,jdbcType=DECIMAL},
      </if>
      <if test="record.checkIdeas != null">
        A.CHECK_IDEAS = #{record.checkIdeas,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        A.STATUS = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.recordStatus != null">
        A.RECORD_STATUS = #{record.recordStatus,jdbcType=CHAR},
      </if>
      <if test="record.updateCount != null">
        A.UPDATE_COUNT = #{record.updateCount,jdbcType=DECIMAL},
      </if>
      <if test="record.creatorId != null">
        A.CREATOR_ID = #{record.creatorId,jdbcType=DECIMAL},
      </if>
      <if test="record.createDate != null">
        A.CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updaterId != null">
        A.UPDATER_ID = #{record.updaterId,jdbcType=DECIMAL},
      </if>
      <if test="record.updateDate != null">
        A.UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.examinationId != null">
        A.EXAMINATION_ID = #{record.examinationId,jdbcType=DECIMAL},
      </if>
      <if test="record.parentId != null">
        A.PARENT_ID = #{record.parentId,jdbcType=DECIMAL},
      </if>
      <if test="record.ruleId != null">
        A.RULE_ID = #{record.ruleId,jdbcType=DECIMAL},
      </if>
      <if test="record.questionType != null">
        A.QUESTION_TYPE = #{record.questionType,jdbcType=CHAR},
      </if>
      <if test="record.testGroupId != null">
        A.TEST_GROUP_ID = #{record.testGroupId,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
      </where>
    </if>
  </update>
  <update id="update" parameterType="com.kingnod.etraining.exam.entity.ExamineeQuestion">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-28 16:57.
    -->
    update EXM_EXAMINEE_QUESTION A
    <set>
      <if test="id != null">
        A.ID = #{id,jdbcType=DECIMAL},
      </if>
      <if test="examPaperId != null">
        A.EXAM_PAPER_ID = #{examPaperId,jdbcType=DECIMAL},
      </if>
      <if test="examinationId != null">
        A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL},
      </if>
      <if test="userId != null">
        A.USER_ID = #{userId,jdbcType=DECIMAL},
      </if>
      <if test="parentId != null">
        A.PARENT_ID = #{parentId,jdbcType=DECIMAL},
      </if>
      <if test="questionId != null">
        A.QUESTION_ID = #{questionId,jdbcType=DECIMAL},
      </if>
      <if test="questionSeq != null">
        A.QUESTION_SEQ = #{questionSeq,jdbcType=DECIMAL},
      </if>
      <if test="degree != null">
        A.DEGREE = #{degree,jdbcType=DECIMAL},
      </if>
      <if test="deservedScore != null">
        A.DESERVED_SCORE = #{deservedScore,jdbcType=DECIMAL},
      </if>
      <if test="examineeAnswer != null">
        A.EXAMINEE_ANSWER = #{examineeAnswer,jdbcType=VARCHAR},
      </if>
      <if test="examineeAnswer1 != null">
        A.EXAMINEE_ANSWER1 = #{examineeAnswer1,jdbcType=VARCHAR},
      </if>
      <if test="examineeAnswer2 != null">
        A.EXAMINEE_ANSWER2 = #{examineeAnswer2,jdbcType=VARCHAR},
      </if>
      <if test="examineeAnswer3 != null">
        A.EXAMINEE_ANSWER3 = #{examineeAnswer3,jdbcType=VARCHAR},
      </if>
      <if test="examineeAnswer4 != null">
        A.EXAMINEE_ANSWER4 = #{examineeAnswer4,jdbcType=VARCHAR},
      </if>
      <if test="reviewed != null">
        A.REVIEWED = #{reviewed,jdbcType=CHAR},
      </if>
      <if test="examNumber != null">
        A.EXAM_NUMBER = #{examNumber,jdbcType=DECIMAL},
      </if>
      <if test="score != null">
        A.SCORE = #{score,jdbcType=DECIMAL},
      </if>
      <if test="correctAnswers != null">
        A.CORRECT_ANSWERS = #{correctAnswers,jdbcType=VARCHAR},
      </if>
      <if test="viewPerson != null">
        A.VIEW_PERSON = #{viewPerson,jdbcType=DECIMAL},
      </if>
      <if test="viewScore != null">
        A.VIEW_SCORE = #{viewScore,jdbcType=DECIMAL},
      </if>
      <if test="approvePerson != null">
        A.APPROVE_PERSON = #{approvePerson,jdbcType=DECIMAL},
      </if>
      <if test="approveScore != null">
        A.APPROVE_SCORE = #{approveScore,jdbcType=DECIMAL},
      </if>
      <if test="approveIdeas != null">
        A.APPROVE_IDEAS = #{approveIdeas,jdbcType=VARCHAR},
      </if>
      <if test="checkPerson != null">
        A.CHECK_PERSON = #{checkPerson,jdbcType=DECIMAL},
      </if>
      <if test="checkIdeas != null">
        A.CHECK_IDEAS = #{checkIdeas,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        A.STATUS = #{status,jdbcType=CHAR},
      </if>
      <if test="recordStatus != null">
        A.RECORD_STATUS = #{recordStatus,jdbcType=CHAR},
      </if>
      <if test="updateCount != null">
        A.UPDATE_COUNT = #{updateCount,jdbcType=DECIMAL},
      </if>
      <if test="creatorId != null">
        A.CREATOR_ID = #{creatorId,jdbcType=DECIMAL},
      </if>
      <if test="createDate != null">
        A.CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updaterId != null">
        A.UPDATER_ID = #{updaterId,jdbcType=DECIMAL},
      </if>
      <if test="updateDate != null">
        A.UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="examinationId != null">
        A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL},
      </if>
      <if test="parentId != null">
        A.PARENT_ID = #{parentId,jdbcType=DECIMAL},
      </if>
      <if test="ruleId != null">
        A.RULE_ID = #{ruleId,jdbcType=DECIMAL},
      </if>
      <if test="approveScore != null">
        A.APPROVE_SCORE = #{approveScore,jdbcType=DECIMAL},
      </if>
      <if test="questionType != null">
        A.QUESTION_TYPE = #{questionType,jdbcType=CHAR},
      </if>
      <if test="testGroupId != null">
        A.TEST_GROUP_ID = #{testGroupId,jdbcType=DECIMAL},
      </if>
    </set>
    where A.ID = #{id,jdbcType=DECIMAL}
  </update>
  <resultMap id="QuestionMap" type="com.kingnod.etraining.exam.entity.Question">
    <!--
      WARNING - @自定义
    -->
    <id column="A_ID" jdbcType="DECIMAL" property="id" />
    <result column="A_FOLDER_ID" jdbcType="DECIMAL" property="folderId" />
    <result column="A_TYPE" jdbcType="CHAR" property="type" />
    <result column="A_DEGREE" jdbcType="DECIMAL" property="degree" />
    <result column="A_SCORE" jdbcType="DECIMAL" property="score" />
    <result column="A_KNOWLEDGE" jdbcType="DECIMAL" property="knowledge" />
    <result column="A_COURSE_ID" jdbcType="DECIMAL" property="courseId" />
    <result column="A_CONTENT" jdbcType="VARCHAR" property="content" />
    <result column="A_REVIEWED" property="reviewed" />
    <result column="A_EXAMINEE_ANSWER" jdbcType="VARCHAR" property="examineeAnswer"/>
    <result column="A_EXAMINEE_ANSWER1" jdbcType="VARCHAR" property="examineeAnswer1"/>
    <result column="A_EXAMINEE_ANSWER2" jdbcType="VARCHAR" property="examineeAnswer2"/>
    <result column="A_EXAMINEE_ANSWER3" jdbcType="VARCHAR" property="examineeAnswer3"/>
    <result column="A_EXAMINEE_ANSWER4" jdbcType="VARCHAR" property="examineeAnswer4"/>
    <result column="A_RECORD_STATUS" jdbcType="CHAR" property="recordStatus" />
    <result column="A_UPDATE_COUNT" jdbcType="DECIMAL" property="updateCount" />
    <result column="A_CREATOR_ID" jdbcType="DECIMAL" property="creatorId" />
    <result column="A_CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
    <result column="A_UPDATER_ID" jdbcType="DECIMAL" property="updaterId" />
    <result column="A_UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <collection column="A_PARENT_ID" property="childQuestionList" select="Question.findListByParentId" />
    <collection column="A_ID" property="questionAnswers" select="ExamineeAnswer.findListByExamineeAnswer" />
  </resultMap>
  
  <select id="findListByAlreadyGenneratedQuestions" parameterType="com.kingnod.etraining.exam.entity.ExamineeQuestion" resultMap="QuestionMap">
    <!--WARNING - @自定义 查询考生已经生成的试题-->
    SELECT A.ID    A_ID,
       C.TYPE      A_TYPE,
       A.DEGREE    A_DEGREE,
       A.SCORE     A_SCORE,
       C.KNOWLEDGE_ID A_KNOWLEDGE_ID,
       C.COURSE_ID A_COURSE_ID,
       C.CONTENT   A_CONTENT,
       A.REVIEWED  A_REVIEWED,
       A.EXAMINEE_ANSWER A_EXAMINEE_ANSWER,
       A.EXAMINEE_ANSWER1 A_EXAMINEE_ANSWER1,
       A.EXAMINEE_ANSWER2 A_EXAMINEE_ANSWER2,
       A.EXAMINEE_ANSWER3 A_EXAMINEE_ANSWER3,
       A.EXAMINEE_ANSWER4 A_EXAMINEE_ANSWER4,
       C.ID A_PARENT_ID
  	FROM EXM_EXAMINEE_QUESTION A, EXM_QUESTION C
 	WHERE A.QUESTION_ID = C.ID
   	   <if test="examPaperId != null">
        AND A.EXAM_PAPER_ID = #{examPaperId,jdbcType=DECIMAL}
      </if>
      <if test="userId != null">
        AND A.USER_ID = #{userId,jdbcType=DECIMAL}
      </if>
      <if test="examNumber != null">
        AND A.EXAM_NUMBER = #{examNumber,jdbcType=DECIMAL}
      </if>
      <if test="examinationId != null">
      	AND A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL}
      </if>
      <if test="testGroupId != null">
      	AND A.TEST_GROUP_ID = #{testGroupId,jdbcType=DECIMAL}
      </if>
 	ORDER BY A.QUESTION_SEQ
  </select>
  
  <select id="findListByPaperAllQuestion" parameterType="com.kingnod.etraining.exam.entity.ExamineeQuestion" resultMap="BaseResultMap">
  	<!-- 自定义   查询试卷下面的所有试题 -->
	SELECT 
		DISTINCT (A.QUESTION_ID) as A_QUESTION_ID,
	    A.EXAM_PAPER_ID as A_EXAM_PAPER_ID,
	    A.QUESTION_SEQ as A_QUESTION_SEQ,
	    A.DEGREE as A_DEGREE,
	    A.SCORE as A_SCORE,
	    A.STATUS as A_STATUS,
	    A.CORRECT_ANSWERS as A_CORRECT_ANSWERS
	  FROM EXM_EXAMINEE_QUESTION A
	 WHERE A.EXAM_PAPER_ID = #{examPaperId,jdbcType=DECIMAL} 
	 	   AND A.STATUS = 'E' 
	 	   AND A.RECORD_STATUS = 'A'
	 ORDER BY A.QUESTION_SEQ
  </select>
  
  <select id="auswertungQuestion" parameterType="java.util.Map" resultMap="BaseResultMap">
  	<!-- 自定义   查询考生试题 -->
	select <include refid="Base_Column_List" /> from (
		select * from exm_examinee_question 
		where examination_id = #{examId} and question_id = #{quesId} and
		(status = #{status} or (status = #{statusIng} and <if test="viewPerson != null">view_person</if><if test="approvePerson != null">approve_person</if> 
  		 = #{userId})) and record_status = 'A' order by status asc) A
	where <![CDATA[rownum <= #{quesNum}]]> and A.record_status = 'A' 
  </select>
  
  <select id="findExamQuestion" parameterType="java.util.Map" resultType="com.kingnod.etraining.exam.entity.ExamineeQuestion">
  	<!-- 自定义   查询考生试题 -->
	select * from EXM_EXAMINEE_QUESTION where EXAM_PAPER_ID = #{atyPaperId} and USER_ID = #{userId} and EXAM_NUMBER = #{times}
  </select>
  
  <select id="findExamActivityQuestion" parameterType="java.util.Map" resultType="com.kingnod.etraining.exam.entity.Question">
  	<!-- 自定义   查询当前考试活动的所有试题 -->
	select * from EXM_QUESTION where id in 
       (select question_id from EXM_EXAMINEE_QUESTION where EXAM_PAPER_ID = #{atyPaperId} 
       and USER_ID = #{userId} and EXAM_NUMBER = #{times} and examination_id = #{examId})
  </select>
  
  <select id="findExamActivityAnswer" parameterType="java.util.Map" resultType="com.kingnod.etraining.exam.entity.QuestionAnswer">
  	<!-- 自定义   查询当前考试活动的所有答案-->
	select * from EXM_QUESTION_ANSWER where id in (select answer_id from exm_examinee_answer where examinee_question_id in 
       (select id from EXM_EXAMINEE_QUESTION where EXAM_PAPER_ID = #{atyPaperId} and USER_ID = #{userId} and EXAM_NUMBER = #{times}
        and examination_id = #{examId})) order by item_seq
  </select>
    
  <select id="findExamAnswerQuestionCount" parameterType="java.util.Map" resultType="java.lang.Integer">
  	<!-- 自定义   查询某次考试时，填写了答案的题目数量-->
	select count(*) from EXM_EXAMINEE_QUESTION where EXAM_PAPER_ID = #{atyPaperId} and USER_ID = #{userId} and EXAM_NUMBER = #{times} 
		and examination_id = #{examinationId} and examinee_answer is not null
  </select>
  
  <select id="findExamAuswertungQuestionCount" parameterType="java.util.Map" resultType="java.lang.Integer">
  	<!-- 自定义   查询某次考试记录的可阅卷的题数-->
	select count(*) from EXM_EXAMINEE_QUESTION where examination_id = #{examId} and exam_number = #{examNumber} and status = #{status}
  </select>
  
  <select id="findExamQuestionByUser" parameterType="java.util.Map" resultMap="BaseResultMap">
  	<!-- WARNING - @自定义  修改考试记录表的阅卷状态-->
	select <include refid="Base_Column_List" /> from exm_examinee_question A where A.examination_id = #{examinationId} and A.exam_number = #{times}
	<if test="questionId != null">
		and A.question_id = #{questionId}
    </if>
    and A.user_id in 
	<foreach close=")" collection="userIds" item="id" open="(" separator=",">#{id}</foreach>
  </select>
  
  <update id="updateExamQuestionStatus" parameterType="java.util.Map">
  	<!-- WARNING - @自定义  修改考生试题表的状态为阅卷中，审核中-->
  	<!-- update exm_examinee_question set status = #{status} where examination_id = #{examId} and exam_number = #{examNumber} and record_status = 'A' -->
  	update exm_examinee_question set status = #{status}
  	<if test="viewPerson != null">,view_person = #{viewPerson}</if>
  	<if test="approvePerson != null">,approve_person = #{approvePerson}</if> 
  	where examination_id = #{examId} and id in
	<foreach close=")" collection="questionIds" item="id" open="(" separator=",">#{id}</foreach> and record_status = 'A'
  </update>
  
  <update id="updateQuestionStatus" parameterType="java.util.Map">
  	<!-- WARNING - @自定义  修改考生试题表的状态为阅卷中，审核中-->
  	update exm_examinee_question set status = #{status},
  	<if test="viewPerson != null">view_person = #{viewPerson}</if>
  	<if test="approvePerson != null">approve_person = #{approvePerson}</if>
  	where id in <foreach close=")" collection="questionIds" item="id" open="(" separator=",">#{id}</foreach> and record_status = 'A'
  </update>
  
  <update id="updateLockedStatus" parameterType="java.util.Map">
  	<!-- WARNING - @自定义  将锁定状态的阅卷中，审核中的试题改为阅卷完，审核完-->
  	update exm_examinee_question set status = #{uStatus}
  	where examination_id = #{examId} and status = #{cStatus} 
  	<if test="viewPerson != null">and view_person = #{viewPerson} and view_score is not null</if> 
  	<if test="approvePerson != null">and approve_person = #{approvePerson} and approve_score is not null</if> and record_status = 'A'
  </update>
  
  <update id="decontrolStatus" parameterType="java.util.Map">
  	<!-- WARNING - @自定义  解锁，将状态从阅卷中，审核中改为未阅卷，未审核-->
  	update exm_examinee_question set view_person = null , status = #{status} where examination_id = #{examId} and question_id = #{quesId}
  	and status = #{lockStatus} and record_status = 'A'
  </update>
  
  <update id="updateNewScore" parameterType="java.util.Map">
  	<!-- WARNING - @自定义 管理员重新给分，  修改试题的审核分数-->
  	update exm_examinee_question set 
  	<if test="approveScore != null">approve_score = #{approveScore} </if> 
  	<if test="viewScore != null">view_score = #{viewScore} </if> 
  	where examination_id = #{examId} and exam_number = #{examNumber} and question_id = #{questionId}
  </update>
  
  <update id="updateExamQuestionAuswertungInfo">
  	<!-- WARNING - @自定义  修改考试记录的试题的阅卷信息-->
  	<!-- update exm_examinee_question set 
  	<if test="viewPerson != null">view_person = #{viewPerson}</if>
  	<if test="approvePerson != null">approve_person = #{approvePerson}</if>
  	where examination_id = #{examinationId} and exam_number = #{times} and user_id in 
	<foreach close=")" collection="userIds" item="id" open="(" separator=",">#{id}</foreach> -->
	
	update exm_examinee_question set 
  	<if test="viewPerson != null">view_person = #{viewPerson}</if>
  	<if test="approvePerson != null">approve_person = #{approvePerson}</if>
  	where examination_id = #{examinationId} and id in 
	<foreach close=")" collection="questionIds" item="id" open="(" separator=",">#{id}</foreach>
  </update>
  
  <select id="findExamAuswertungStatus" parameterType="java.util.Map" resultMap="BaseResultMap">
  	<!-- WARNING - @自定义  获取当前考试记录填写了答案的试题的数据，判断阅卷是否完成-->
  	select * from exm_examinee_question where examination_id = #{examinationId} and exam_number = #{times} and status != #{status} and record_status = 'A'
  	<if test="userId != null">
  		and user_id = #{userId} 
  	</if>
  </select>
  
  <select id="calculateTotalScore" parameterType="java.util.Map" resultMap="BaseResultMap">
  	<!-- WARNING - @自定义 计算总分-->
  	select user_id,sum(score) from exm_examinee_question where examination_id = #{examinationId} 
  		and exam_number = #{examNumber} and record_status = 'A' group by user_id
  </select>
  
  <resultMap id="ExaminationManageResultMap" type="com.kingnod.etraining.exam.entity.ExaminationManage">
    <!--
      WARNING - @自定义：对应考试管理list的实体
    -->
    <result column="EXAMINATION_ID" jdbcType="DECIMAL" property="exminationId" />
    <result column="EXAMINATION_NAME" jdbcType="VARCHAR" property="exminationName" />
    <result column="QUESTION_COUNT" jdbcType="DECIMAL" property="questionCount" />
  </resultMap>
  
  <sql id="sqlExamManageByCriteria">
  	<!--
      WARNING - @自定义：查询可阅卷考试或可审核考试
      from ATY_EXAMINATION D
		LEFT JOIN ATY_EXAMINEES_HISTORY B ON D.ID = B.EXAMINATION_ID
		left join EXM_EXAMINEE_QUESTION A on D.ID = A.EXAMINATION_ID 
		left join EXM_QUESTION_TEST_GROUP E on A.QUESTION_ID = E.QUESTION_ID AND E.EXAM_PAPER_ID = A.EXAM_PAPER_ID
		left join EXM_TEST_GROUP F on E.TEST_GROUP_ID = F.ID
		left join ATY_ENROLL_EXAM_WORKER C ON D.ID = C.ACTIVITY_ID and C.WORK_TYPE = #{params.workType }
	where D.RECORD_STATUS = 'A' and B.RECORD_STATUS = 'A' 
		and C.RECORD_STATUS = 'A' and A.RECORD_STATUS = 'A' 
		and E.RECORD_STATUS = 'A' and F.RECORD_STATUS = 'A'
		and D.PUBLISH_STATUS = 'R' 
		and C.USER_ID = #{params.userId,jdbcType=DECIMAL}
		and B.STATUS = #{params.status,jdbcType=DECIMAL}
		and (A.STATUS = #{params.status,jdbcType=DECIMAL}<if test="params.recordStatus != null"> or A.STATUS = #{params.recordStatus,jdbcType=DECIMAL}</if>)
		and F.READING_TYPE = 'M'
		<if test="params.examinationId != null">
		and D.ID = #{params.examinationId,jdbcType=DECIMAL}
		</if>
    -->
	from ATY_EXAMINATION D
		LEFT JOIN ATY_EXAMINEES_HISTORY B ON D.ID = B.EXAMINATION_ID
		left join EXM_EXAMINEE_QUESTION A on D.ID = A.EXAMINATION_ID 
		left join ATY_ENROLL_EXAM_WORKER C ON D.ID = C.ACTIVITY_ID and C.WORK_TYPE = #{params.workType }
	where D.RECORD_STATUS = 'A' and B.RECORD_STATUS = 'A' 
		and C.RECORD_STATUS = 'A' and A.RECORD_STATUS = 'A' 
		and D.PUBLISH_STATUS = 'R' 
		and C.USER_ID = #{params.userId,jdbcType=DECIMAL}
		and B.STATUS = #{params.status,jdbcType=DECIMAL}
		and (A.STATUS = #{params.status,jdbcType=DECIMAL}<if test="params.recordStatus != null"> or A.STATUS = #{params.recordStatus,jdbcType=DECIMAL}</if>)
		<if test="params.examinationId != null">
		and D.ID = #{params.examinationId,jdbcType=DECIMAL}
		</if>
  </sql>
  
  <select id="findExamManageByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultMap="ExaminationManageResultMap">
    <!--
      WARNING - @自定义：查询可阅卷考试或可审核考试: param.userId(阅卷人), params.examinationId(指定考试活动)
    -->
    select X.EXAMINATION_ID as EXAMINATION_ID, Y.NAME as EXAMINATION_NAME, count(X.QUESTION_ID) as QUESTION_COUNT
    from
    (select distinct A.*
	<include refid="sqlExamManageByCriteria" />
	) X, ATY_EXAMINATION Y
	where X.EXAMINATION_ID = Y.ID
	group by X.EXAMINATION_ID, Y.NAME
  </select>
  <select id="countExamManageByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!--
      WARNING - @自定义：查询可阅卷考试或可审核考试
    -->
    select count(*) from
    (select X.EXAMINATION_ID as EXAMINATION_ID, Y.NAME as EXAMINATION_NAME, count(X.QUESTION_ID) as QUESTION_COUNT
    from
    (select distinct A.*
	<include refid="sqlExamManageByCriteria" />
	) X, ATY_EXAMINATION Y
	where X.EXAMINATION_ID = Y.ID
	group by X.EXAMINATION_ID, Y.NAME)
  </select>
  <select id="findNeedMarkingQuestionByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
    <!--
      WARNING - @自定义：可阅卷人查询需要阅卷的试题
    -->
    select distinct <include refid="Base_Column_List" />
	<include refid="sqlExamManageByCriteria" />
  </select>
  <select id="countNeedMarkingQuestionByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!--
      WARNING - @自定义：可阅卷人查询需要阅卷的试题
    -->
    select count(*)
    from (select distinct A.ID
	<include refid="sqlExamManageByCriteria" />
	)
  </select>
  
  <select id="findCalculateAuswertungTotalScore" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory" resultType="java.lang.Integer">
	<!-- @自定义  计算阅卷完成的总分数 -->
	SELECT 
	<if test="@com.kingnod.core.util.StringUtils@isNotEmpty(status)">
		<if test="status == 'E '.trim()">
			SUM(A.VIEW_SCORE)
		</if>
		<if test="status == 'R '.trim()">
			SUM(A.APPROVE_SCORE)
		</if>
	</if>
	  FROM EXM_EXAMINEE_QUESTION A
	 WHERE A.EXAM_PAPER_ID = #{atyPaperId,jdbcType=DECIMAL}
	   AND A.EXAM_NUMBER = #{times,jdbcType=DECIMAL}
	   AND A.USER_ID = #{userId,jdbcType=DECIMAL}
	   AND A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL}
	   AND A.RECORD_STATUS = 'A'
  </select>
  
  <select id="findAuswertungQuestion" parameterType="java.util.Map" resultType="com.kingnod.etraining.exam.entity.Question">
  	<!-- @自定义  获取阅卷员可以阅卷的试题对象 -->
	SELECT DISTINCT A.ID,A.CONTENT,A.TYPE,
	    SUM(CASE WHEN B.status = #{status} THEN 1 ELSE 0 END) AS auswertungNumber,
	    SUM(CASE WHEN B.status = #{statusIng} 
	    	<if test="viewPerson != null"> and B.view_person = #{userId}</if>
	    	<if test="approvePerson != null"> and B.approve_Person = #{userId}</if> 
	    	THEN 1 ELSE 0 END) AS lockAsuwertungNumber
	    FROM exm_question A, exm_examinee_question B
	    WHERE A.ID = B.QUESTION_ID
	    AND B.examination_id = #{examId}
	    AND B.question_id in
	        (SELECT question_id from ATY_ENROLL_EXAM_WORKER where activity_id = #{examId} and work_type = #{workType} and user_id = #{userId} and RECORD_STATUS = 'A')
	    AND B.RECORD_STATUS = 'A'
	    AND B.question_type in ('T','A','Z')
	    GROUP BY A.ID,A.CONTENT,A.TYPE
  </select>
  
  <select id="getExamQuestionByGiveScore" parameterType="java.util.Map" resultType="com.kingnod.etraining.exam.entity.ExamineeQuestion">
  	<!-- @自定义  获取阅卷员可以阅卷的试题对象 -->
	select a.view_score as viewScore,a.approve_score as approveScore,b.totalScore as score from exm_examinee_question a inner join aty_examinees_history b 
		on a.examination_id = b.examination_id 
		where b.examination_id = #{examId}
		      and b.times = #{examNumber}
		      and a.examination_id = #{examId}
		      and a.exam_number = #{examNumber} 
		      and a.question_id = #{questionId}
  </select>
  
  <select id="getExamQuestionByIds" parameterType="java.util.Map" resultType="com.kingnod.etraining.exam.entity.ExamineeQuestion">
  	select id,examination_id,question_id,exam_number,status,view_score,(select A.full_name from org_user A where A.id = view_person) viewPersonName,
		 approve_score,(select A.full_name from org_user A where A.id = approve_person) approvePersonName from exm_examinee_question 
		 where RECORD_STATUS = 'A' and id in <foreach open="(" close=")" collection="list" item="id" separator=",">#{id}</foreach>
  </select>
</mapper>