<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ExamineesHistory">
  <resultMap id="BaseResultMap" type="com.kingnod.etraining.activity.entity.ExamineesHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    <id column="A_ID" jdbcType="DECIMAL" property="id" />
    <result column="A_USER_ID" jdbcType="DECIMAL" property="userId" />
    <result column="A_ATY_PAPER_ID" jdbcType="DECIMAL" property="atyPaperId" />
    <result column="A_EXAMINATION_ID" jdbcType="DECIMAL" property="examinationId" />
    <result column="A_GENERATED" jdbcType="CHAR" property="generated" />
    <result column="A_STATUS" jdbcType="CHAR" property="status" />
    <result column="A_AUSWERTUNG_STATUS" jdbcType="CHAR" property="auswertungStatus" />
    <result column="A_START_TIME" jdbcType="TIMESTAMP" property="startTime" />
    <result column="A_END_TIME" jdbcType="TIMESTAMP" property="endTime" />
    <result column="A_ANSWER_TIME_LENGTH" jdbcType="DECIMAL" property="answerTimeLength" />
    <result column="A_SURPLUS_TIME" jdbcType="DECIMAL" property="surplusTime" />
    <result column="A_TIMES" jdbcType="DECIMAL" property="times" />
    <result column="A_SCORE" jdbcType="DECIMAL" property="score" />
    <result column="A_RECORD_STATUS" jdbcType="CHAR" property="recordStatus" />
    <result column="A_UPDATE_COUNT" jdbcType="DECIMAL" property="updateCount" />
    <result column="A_CREATOR_ID" jdbcType="DECIMAL" property="creatorId" />
    <result column="A_CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
    <result column="A_UPDATER_ID" jdbcType="DECIMAL" property="updaterId" />
    <result column="A_UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="A_TOTALSCORE" jdbcType="VARCHAR" property="totalscore" />
    <result column="A_DELIVERY_EXAM_TYPE" jdbcType="CHAR" property="deliveryExamType" />
    <result column="FULL_NAME" jdbcType="VARCHAR" property="fullName" />
    <result column="LOGIN_NAME" jdbcType="VARCHAR" property="loginName" />
    <result column="NAME" jdbcType="VARCHAR" property="paperName" />
    <result column="TOTAL_SCORE" jdbcType="VARCHAR" property="paperTotalScore" />
    <association column="A_EXAMINATION_ID" property="examination" select="Examination.findExaminationById" />
    <association column="A_ATY_PAPER_ID" property="paper" select="Paper.findById" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    A.ID as A_ID, A.USER_ID as A_USER_ID, A.ATY_PAPER_ID as A_ATY_PAPER_ID, A.EXAMINATION_ID as A_EXAMINATION_ID, 
    A.GENERATED as A_GENERATED, A.STATUS as A_STATUS, A.AUSWERTUNG_STATUS as A_AUSWERTUNG_STATUS, A.START_TIME as A_START_TIME, A.END_TIME as A_END_TIME, 
    A.ANSWER_TIME_LENGTH as A_ANSWER_TIME_LENGTH, A.SURPLUS_TIME as A_SURPLUS_TIME, A.TIMES as A_TIMES, 
    A.SCORE as A_SCORE, A.RECORD_STATUS as A_RECORD_STATUS, A.UPDATE_COUNT as A_UPDATE_COUNT, 
    A.CREATOR_ID as A_CREATOR_ID, A.CREATE_DATE as A_CREATE_DATE, A.UPDATER_ID as A_UPDATER_ID, 
    A.UPDATE_DATE as A_UPDATE_DATE, A.TOTALSCORE as A_TOTALSCORE, A.DELIVERY_EXAM_TYPE as A_DELIVERY_EXAM_TYPE
    <if test="params.isQuery != null">
	    ,B.LOGIN_NAME as LOGIN_NAME
	    ,B.FULL_NAME as FULL_NAME
	    ,C.NAME
	    ,C.TOTAL_SCORE
    </if>
  </sql>
  <select id="findByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    select
    <include refid="Base_Column_List" />
        <if test="params.isQuery == null">
		     from ATY_EXAMINEES_HISTORY A
    	</if>
        <if test="params.isQuery != null">
		     from ATY_EXAMINEES_HISTORY A, ORG_USER B, EXM_EXAM_PAPER C
    	</if>
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
	      <if test="params.isQuery != null">
	      	AND A.USER_ID=B.ID 
	      	AND A.ATY_PAPER_ID=C.ID
	      </if>
      </where>
    </if>
    <if test="hasOrderBy">
      order by
      <foreach collection="orderBys" item="orderBy" separator=",">
        ${orderBy}
      </foreach>
    </if>
  </select>
  <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    select 
    <include refid="Base_Column_List" />
        <if test="params.isQuery == null">
		     from ATY_EXAMINEES_HISTORY A
    	</if>
        <if test="params.isQuery != null">
		     from ATY_EXAMINEES_HISTORY A, ORG_USER B, EXM_EXAM_PAPER C
    	</if>
    where A.ID = #{id,jdbcType=DECIMAL}
	      <if test="params.isQuery != null">
	      	AND A.USER_ID=B.ID 
	      	AND A.ATY_PAPER_ID=C.ID
	      </if>
  </select>
  <delete id="deleteById" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    delete from ATY_EXAMINEES_HISTORY
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByCriteria" parameterType="com.kingnod.core.criteria.Criteria">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    delete from ATY_EXAMINEES_HISTORY A
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
      </where>
    </if>
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
  </delete>
  <insert id="insert" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      select ATY_EXAMINEES_HISTORY_SEQ.nextval from dual
    </selectKey>
    insert into ATY_EXAMINEES_HISTORY (ID, USER_ID, ATY_PAPER_ID, 
      EXAMINATION_ID, GENERATED, STATUS, AUSWERTUNG_STATUS,
      START_TIME, END_TIME, ANSWER_TIME_LENGTH, 
      SURPLUS_TIME, TIMES, SCORE, 
      RECORD_STATUS, UPDATE_COUNT, CREATOR_ID, 
      CREATE_DATE, UPDATER_ID, UPDATE_DATE, 
      TOTALSCORE, DELIVERY_EXAM_TYPE)
    values (#{id,jdbcType=DECIMAL}, #{userId,jdbcType=DECIMAL}, #{atyPaperId,jdbcType=DECIMAL}, 
      #{examinationId,jdbcType=DECIMAL}, #{generated,jdbcType=CHAR}, #{status,jdbcType=CHAR}, #{auswertungStatus,jdbcType=CHAR}, 
      #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, #{answerTimeLength,jdbcType=DECIMAL}, 
      #{surplusTime,jdbcType=DECIMAL}, #{times,jdbcType=DECIMAL}, #{score,jdbcType=DECIMAL}, 
      #{recordStatus,jdbcType=CHAR}, #{updateCount,jdbcType=DECIMAL}, #{creatorId,jdbcType=DECIMAL}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updaterId,jdbcType=DECIMAL}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{totalscore,jdbcType=VARCHAR},#{deliveryExamType,jdbcType=CHAR})
  </insert>
  <select id="countByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    select count(ID) 
        <if test="params.isQuery == null">
		     from ATY_EXAMINEES_HISTORY A
    	</if>
        <if test="params.isQuery != null">
		     from ATY_EXAMINEES_HISTORY A, ORG_USER B, EXM_EXAM_PAPER C
    	</if>
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
	      <if test="params.isQuery != null">
	      	AND A.USER_ID=B.ID 
	      	AND A.ATY_PAPER_ID=C.ID
	      </if>
      </where>
    </if>
  </select>
  <update id="updateByCriteria" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    update ATY_EXAMINEES_HISTORY A
    <set>
      <if test="record.id != null">
        A.ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.userId != null">
        A.USER_ID = #{record.userId,jdbcType=DECIMAL},
      </if>
      <if test="record.atyPaperId != null">
        A.ATY_PAPER_ID = #{record.atyPaperId,jdbcType=DECIMAL},
      </if>
      <if test="record.examinationId != null">
        A.EXAMINATION_ID = #{record.examinationId,jdbcType=DECIMAL},
      </if>
      <if test="record.generated != null">
        A.GENERATED = #{record.generated,jdbcType=CHAR},
      </if>
      <if test="record.status != null">
        A.STATUS = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.auswertungStatus != null">
        A.AUSWERTUNG_STATUS = #{record.auswertungStatus,jdbcType=CHAR},
      </if>
      <if test="record.startTime != null">
        A.START_TIME = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null">
        A.END_TIME = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.answerTimeLength != null">
        A.ANSWER_TIME_LENGTH = #{record.answerTimeLength,jdbcType=DECIMAL},
      </if>
      <if test="record.surplusTime != null">
        A.SURPLUS_TIME = #{record.surplusTime,jdbcType=DECIMAL},
      </if>
      <if test="record.times != null">
        A.TIMES = #{record.times,jdbcType=DECIMAL},
      </if>
      <if test="record.score != null">
        A.SCORE = #{record.score,jdbcType=DECIMAL},
      </if>
      <if test="record.recordStatus != null">
        A.RECORD_STATUS = #{record.recordStatus,jdbcType=CHAR},
      </if>
      <if test="record.updateCount != null">
        A.UPDATE_COUNT = #{record.updateCount,jdbcType=DECIMAL},
      </if>
      <if test="record.creatorId != null">
        A.CREATOR_ID = #{record.creatorId,jdbcType=DECIMAL},
      </if>
      <if test="record.createDate != null">
        A.CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updaterId != null">
        A.UPDATER_ID = #{record.updaterId,jdbcType=DECIMAL},
      </if>
      <if test="record.updateDate != null">
        A.UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.totalscore != null">
        A.TOTALSCORE = #{record.totalscore,jdbcType=VARCHAR},
      </if>
      <if test="record.deliveryExamType != null">
        A.DELIVERY_EXAM_TYPE = #{record.deliveryExamType,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
      </where>
    </if>
  </update>
  <update id="update" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-05-05 18:03.
    -->
    update ATY_EXAMINEES_HISTORY A
    <set>
      <if test="id != null">
        A.ID = #{id,jdbcType=DECIMAL},
      </if>
      <if test="userId != null">
        A.USER_ID = #{userId,jdbcType=DECIMAL},
      </if>
      <if test="atyPaperId != null">
        A.ATY_PAPER_ID = #{atyPaperId,jdbcType=DECIMAL},
      </if>
      <if test="examinationId != null">
        A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL},
      </if>
      <if test="generated != null">
        A.GENERATED = #{generated,jdbcType=CHAR},
      </if>
      <if test="status != null">
        A.STATUS = #{status,jdbcType=CHAR},
      </if>
      <if test="auswertungStatus != null">
        A.AUSWERTUNG_STATUS = #{auswertungStatus,jdbcType=CHAR},
      </if>
      <if test="startTime != null">
        A.START_TIME = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        A.END_TIME = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="answerTimeLength != null">
        A.ANSWER_TIME_LENGTH = #{answerTimeLength,jdbcType=DECIMAL},
      </if>
      <if test="surplusTime != null">
        A.SURPLUS_TIME = #{surplusTime,jdbcType=DECIMAL},
      </if>
      <if test="times != null">
        A.TIMES = #{times,jdbcType=DECIMAL},
      </if>
      <if test="score != null">
        A.SCORE = #{score,jdbcType=DECIMAL},
      </if>
      <if test="recordStatus != null">
        A.RECORD_STATUS = #{recordStatus,jdbcType=CHAR},
      </if>
      <if test="updateCount != null">
        A.UPDATE_COUNT = #{updateCount,jdbcType=DECIMAL},
      </if>
      <if test="creatorId != null">
        A.CREATOR_ID = #{creatorId,jdbcType=DECIMAL},
      </if>
      <if test="createDate != null">
        A.CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updaterId != null">
        A.UPDATER_ID = #{updaterId,jdbcType=DECIMAL},
      </if>
      <if test="updateDate != null">
        A.UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="totalscore != null">
        A.TOTALSCORE = #{totalscore,jdbcType=VARCHAR},
      </if>
      <if test="deliveryExamType != null">
        A.DELIVERY_EXAM_TYPE = #{deliveryExamType,jdbcType=CHAR},
      </if>
    </set>
    where A.ID = #{id,jdbcType=DECIMAL}
  </update>
  
  <update id="updateNewTotalScore" parameterType="java.util.Map" >
  	<!-- WARNING - @自定义  管理员查阅试卷，重新给分，修改总分数 -->
  	update aty_examinees_history set totalScore = #{totalScore} where examination_id = #{examId} and times = #{examNumber}
  </update>
  
  <select id="findMaxByTimes" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory" resultType="java.lang.Integer">
    <!-- WARNING - @自定义  -->
    select MAX(A.TIMES)
    from ATY_EXAMINEES_HISTORY A
    where
      <if test="userId != null">
        A.USER_ID = #{userId,jdbcType=DECIMAL}
      </if>
      <if test="atyPaperId != null">
        AND A.ATY_PAPER_ID = #{atyPaperId,jdbcType=DECIMAL}
      </if>
      <if test="examinationId != null">
        AND A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL}
      </if>
        <![CDATA[
			AND A.STATUS <> 'S'
		]]>
  </select>
  
  <select id="findLastByTimes" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory" resultType="java.lang.Integer">
    <!-- WARNING - @自定义  -->
    select MAX(A.TIMES)
    from ATY_EXAMINEES_HISTORY A
    where
      <if test="userId != null">
        A.USER_ID = #{userId,jdbcType=DECIMAL}
      </if>
      <if test="atyPaperId != null">
        AND A.ATY_PAPER_ID = #{atyPaperId,jdbcType=DECIMAL}
      </if>
      <if test="examinationId != null">
        AND A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL}
      </if>
  </select>
  
  <select id="findExamDetail" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory" resultType="com.kingnod.etraining.activity.entity.ExamineesHistory">
    <!-- WARNING - @自定义 查询当前考试活动的历史考试记录  -->
    select * from ATY_EXAMINEES_HISTORY where examination_id = #{examinationId,jdbcType=DECIMAL} and user_id = #{userId,jdbcType=DECIMAL} 
    and status != 'S' order by times
    <!-- and status = 'E'  -->
  </select>
  
  <select id="findExamDetailPage" parameterType="com.kingnod.core.criteria.Criteria" resultType="com.kingnod.etraining.activity.entity.ExamineesHistory">
    <!-- WARNING - @自定义 查询当前考试活动的历史考试记录  -->
    select * from ATY_EXAMINEES_HISTORY where examination_id = #{params.examinationId,jdbcType=DECIMAL} and user_id = #{params.userId,jdbcType=DECIMAL}
    and status != 'S' order by times
    <!-- and status = 'E'  -->
  </select>
  <select id="findExamDetailPageCount" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!-- WARNING - @自定义 查询当前考试活动的历史考试记录  -->
    select count(ID) from ATY_EXAMINEES_HISTORY where examination_id = #{params.examinationId,jdbcType=DECIMAL} and user_id = #{params.userId,jdbcType=DECIMAL} 
    and status != 'S' 
    <!-- and status = 'E'  -->
  </select>
  
  <select id="findMaxTimesById" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory" resultMap="BaseResultMap">
  	<!-- WARNING - @自定义  -->
  	SELECT MAX(A.TIMES) as A_TIMES,A.STATUS as A_STATUS,A.ID as A_ID
    FROM ATY_EXAMINEES_HISTORY A 
    WHERE
      <if test="userId != null">
        A.USER_ID = #{userId,jdbcType=DECIMAL}
      </if>
      <if test="atyPaperId != null">
        AND A.ATY_PAPER_ID = #{atyPaperId,jdbcType=DECIMAL}
      </if>
      <if test="examinationId != null">
        AND A.EXAMINATION_ID = #{examinationId,jdbcType=DECIMAL}
      </if>
      <![CDATA[
       	AND A.STATUS = 'S'
       ]]>
       GROUP BY A.TIMES,A.STATUS,A.ID
  </select>
  
  <select id="findExamMaxSurplusnumber" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory" resultType="com.kingnod.etraining.activity.entity.ExamineesHistory">
  	<!-- WARNING - @自定义  获取考试活动的已考次数-->
	select * from ATY_EXAMINEES_HISTORY where user_id = #{userId,jdbcType=DECIMAL} and examination_id = #{examinationId,jdbcType=DECIMAL}
		and times = (select max(times) from ATY_EXAMINEES_HISTORY where user_id = #{userId,jdbcType=DECIMAL} and examination_id = #{examinationId,jdbcType=DECIMAL})
		and record_status = 'A'
  </select>
  
  <select id="findReadExamination" resultMap="BaseResultMap">
	SELECT DISTINCT (A.ATY_PAPER_ID) as A_ATY_PAPER_ID, A.EXAMINATION_ID as A_EXAMINATION_ID, A.ANSWER_TIME_LENGTH as A_ANSWER_TIME_LENGTH
	  FROM ATY_EXAMINEES_HISTORY A
	 WHERE A.STATUS = 'E'
	 GROUP BY A.ATY_PAPER_ID, A.ID, A.EXAMINATION_ID, A.ANSWER_TIME_LENGTH
  </select>
  
  <select id="findCanAuswertungHistory" resultMap="BaseResultMap" parameterType="java.util.Map">
    <!-- WARNING - @自定义  获取状态为'E'(考试结束)的所有考试记录，即可以阅卷的记录-->
	select
	<include refid="Base_Column_List" />
	from ATY_EXAMINEES_HISTORY A where A.status = #{status} AND A.RECORD_STATUS = 'A'
  </select>
  
  <select id="findAtyRestraintCount" parameterType="java.util.Map" resultType="java.lang.Long">
    <!-- WARNING - @自定义  获取本天，本周，本月考试的次数-->
	select count(times) from ATY_EXAMINEES_HISTORY where user_id = #{userId} and examination_id = #{examId} and start_time between #{startDate} and #{endDate}
  </select>
  
  <select id="findExamAVGScore" parameterType="java.util.Map" resultType="java.lang.Double">
    <!-- WARNING - @自定义  获取考试历史记录平均分数-->
	select avg(score) from ATY_EXAMINEES_HISTORY where user_id = #{userId} and examination_id = #{examId}
  </select>
  
  <select id="findExamMAXScore" parameterType="java.util.Map" resultType="java.lang.Double">
    <!-- WARNING - @自定义  获取考试历史记录分数最高的分数-->
	select max(score) from ATY_EXAMINEES_HISTORY where user_id = #{userId} and examination_id = #{examId}
  </select>
  
  <select id="findExamLASTScore" parameterType="java.util.Map" resultType="java.lang.Double">
    <!-- WARNING - @自定义  获取考试历史最后一个记录的分数-->
	select score from ATY_EXAMINEES_HISTORY where user_id = #{userId} and examination_id = #{examId} and times = 
		(select max(times) from ATY_EXAMINEES_HISTORY where user_id = #{userId} and examination_id = #{examId})
  </select>
  
  <select id="findExamHistoryUserCount" resultType="java.lang.Long" parameterType="com.kingnod.etraining.activity.entity.ExamineesHistory">
    <!-- WARNING - @自定义  获取本次考试参加的人数-->
	select count(*) from ATY_EXAMINEES_HISTORY A where A.examination_id = #{examinationId} and record_status = 'A' and A.times = #{times} 
	  <if test="auswertungStatus != null">
		and A.AUSWERTUNG_STATUS = #{auswertungStatus}
      </if>
  </select>
  
  <select id="findCanExamHistoryNumber" resultMap="BaseResultMap" parameterType="java.util.Map">
    <!-- WARNING - @自定义  根据阅卷员指定的阅卷数量，抽取考试记录-->
	<!-- select top * from ATY_EXAMINEES_HISTORY A where A.examination_id = #{examinationId} and record_status = 'A' and A.times = #{times} 
		and A.AUSWERTUNG_STATUS = 'A' and rownum <= #{number } order by id -->
		
	select * from ATY_EXAMINEES_HISTORY A where A.examination_id = #{examinationId} and A.times = #{times}  and record_status = 'A' 
		and A.AUSWERTUNG_STATUS = #{status } and rownum = #{number } order by id
	<!-- SELECT B.* FROM (
		select A.*, ROWNUM ROWNUMBER from ATY_EXAMINEES_HISTORY A where A.examination_id = #{examinationId} and A.times = #{times} and record_status = 'A'
		and A.AUSWERTUNG_STATUS = 'I' order by id) B WHERE B.ROWNUMBER &lt;= ${number } -->
  </select>
  
  <update id="updateExamHistoryAuswertungStatus">
  	<!-- WARNING - @自定义  修改考试记录表的阅卷状态-->
  	update ATY_EXAMINEES_HISTORY set status =#{status } ,auswertung_status = #{status } where id in <foreach close=")" collection="list" item="id" open="(" separator=",">#{id}</foreach>
  </update>
  
  <update id="updateExamHistorySuccessStatus" parameterType="java.util.Map">
  	<!-- WARNING - @自定义  修改考试记录表的阅卷状态-'阅卷成功'-->
  	update aty_examinees_history set auswertung_status = #{ausStatus },status = #{status } where examination_id = #{examinationId} and times = #{times}
  </update>
  
  <update id="updateExamHistoryTotalScore" parameterType="java.util.Map">
  	<!-- WARNING - @自定义  修改考试记录总分数-->
  	update aty_examinees_history set totalscore = (select sum(view_score) from exm_examinee_question where examination_id = #{examinationId} 
  		and exam_number = #{times} and record_status = 'A') where examination_id = #{examinationId} and times = #{times} and record_status = 'A'
  </update>
  
  <select id="findExamDetails" parameterType="com.kingnod.core.criteria.Criteria" resultType="com.kingnod.etraining.activity.entity.ExamineesHistory">
    <!-- WARNING - @自定义  考试活动-考试详情-->
    select * from 
    (
	select a.user_id 			userId,
       b.examination_id 		examinationId,
       b.examination_name 		examName,
       b.paper_name 			paperName,
       c.full_name 				fullName,
       c.login_name 			loginName,
       b.paper_total_score 		paperTotalScore,
       a.examTime 				examTime,
       b.reexam_times 			reexamTimes,
       a.max_score 				maxScore,
       a.avg_score 				avgScore,
       a.last_score 			lastScort,
       b.scoring_type 			scoringType,
       case
         when b.scoring_type = 'A' then
          a.avg_score
         when b.scoring_type = 'H' then
          to_number(a.max_score)
         else
          to_number(a.last_score)
       end 						finalScore
  from (select ah.examination_id,
               ah.user_id,
               ah.examTime,
               ah.max_score,
               ah.sum_score / ah.examTime avg_score,
               
               (select totalScore
                  from aty_examinees_history rowAH
                 where rowAH.Examination_Id = ah.examination_id
                   and rowAH.User_Id = ah.user_id
                   and rowAH.Times = ah.examTime) last_score
          from (select examination_id,
                       user_id,
                       count(*) examTime,
                       max(totalScore) max_score,
                       sum(totalScore) sum_score
                  from aty_examinees_history
                 group by examination_id, user_id) ah) a,
       (select a1.name examination_name,
               a1.id examination_id,
               a1.scoring_type,
               a1.reexam_times,
               a2.total_score paper_total_score,
               a2.name paper_name
          from aty_examination a1, exm_exam_paper a2
         where a1.aty_paper_id = a2.id) b,
       org_user c
       
 	   where a.examination_id = b.examination_id
	   and a.user_id = c.id
	   and b.examination_id = #{params.examinationId,jdbcType=DECIMAL}
	   and b.scoring_type = #{params.scoringType,jdbcType=CHAR}
	)
	 <if test="_parameter != null">
	      <where>
	        <include refid="Global.Where_Clause" />
	      </where>
	 </if>
	 <if test="hasOrderBy">
	      order by
	      <foreach collection="orderBys" item="orderBy" separator=",">
	        ${orderBy}
	      </foreach>
	 </if>
  </select>
  
  
  <select id="countExamDetailsByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!-- WARNING - @自定义  考试活动-考试详情-计算记录数-->
    select count(userId)
    from 
	(select a.user_id 			userId,
       b.examination_id 		examinationId,
       b.examination_name 		examName,
       b.paper_name 			paperName,
       c.full_name 				fullName,
       c.login_name 			loginName,
       b.paper_total_score 		paperTotalScore,
       a.examTime 				examTime,
       b.reexam_times 			reexamTimes,
       a.max_score 				maxScore,
       a.avg_score 				avgScore,
       a.last_score 			lastScort,
       b.scoring_type 			scoringType,
       case
         when b.scoring_type = 'A' then
          a.avg_score
         when b.scoring_type = 'H' then
          to_number(a.max_score)
         else
          to_number(a.last_score)
       end 						finalScore
  from (select ah.examination_id,
               ah.user_id,
               ah.examTime,
               ah.max_score,
               ah.sum_score / ah.examTime avg_score,
               
               (select totalScore
                  from aty_examinees_history rowAH
                 where rowAH.Examination_Id = ah.examination_id
                   and rowAH.User_Id = ah.user_id
                   and rowAH.Times = ah.examTime) last_score
          from (select examination_id,
                       user_id,
                       count(*) examTime,
                       max(totalScore) max_score,
                       sum(totalScore) sum_score
                  from aty_examinees_history
                 group by examination_id, user_id) ah) a,
       (select a1.name examination_name,
               a1.id examination_id,
               a1.scoring_type,
               a1.reexam_times,
               a2.total_score paper_total_score,
               a2.name paper_name
          from aty_examination a1, exm_exam_paper a2
         where a1.aty_paper_id = a2.id) b,
       org_user c

		where a.examination_id = b.examination_id
 		and a.user_id = c.id
 		and b.examination_id = #{params.examinationId,jdbcType=DECIMAL}
 		)
	 <if test="_parameter != null">
	      <where>
	        <include refid="Global.Where_Clause" />
	      </where>
	 </if>
  </select>
  
  <select id="getMaxOrAvgScore" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Float">
    <!-- WARNING - @根据学员ID，获取每次考试的最大值或者平均值 -->
    select 
    <if test="params.scoringType=='H '.trim()">
    	nvl(max(TOTALSCORE), 0) maxScore
	</if>
	<if test="params.scoringType=='A '.trim()">
    	nvl(avg(TOTALSCORE), 0) avgScore
	</if>    	
	  from aty_examinees_history
	 where user_id = #{params.userId,jdbcType=DECIMAL}
	   and examination_id = #{params.examinationId,jdbcType=DECIMAL}
	   and aty_paper_id = #{params.paperId,jdbcType=DECIMAL}
	 group by user_id, examination_id
  </select>
  
  <!-- 检测是否有状态为正在考试中且超时的记录-->
  <select id="countExaminatingAndTimeout" parameterType="java.util.Map" resultType="java.lang.Integer">
   select count(EXAMINATION_ID) 
     from aty_examinees_history 
    where RECORD_STATUS='A'
      and status='S'
      and (to_date('${currentDateTime}','yyyy-MM-dd HH24:mi:ss')-start_time)*24*60>ANSWER_TIME_LENGTH
  </select>
  
  <!-- 查找未状态为正在考试中且超时的记录-->
  <select id="findExaminatingAndTimeout" parameterType="java.util.Map" resultMap="BaseResultMap">
   select EXAMINATION_ID A_EXAMINATION_ID,TIMES A_TIMES
     from  aty_examinees_history A
    where RECORD_STATUS='A'
      and status='S'
      and (to_date('${currentDateTime}','yyyy-MM-dd HH24:mi:ss')-start_time)*24*60>ANSWER_TIME_LENGTH
  </select>
  
  <!-- 修改超时记录的交卷状态 -->
  <update id="updateStatusByTimeout" parameterType="java.util.Map">
  	update aty_examinees_history set status='E',END_TIME=START_TIME+ANSWER_TIME_LENGTH/(24*60),DELIVERY_EXAM_TYPE='S' 
  	 where status='S' 
       and RECORD_STATUS='A'
  	   and (to_date('${currentDateTime}','yyyy-MM-dd HH24:mi:ss')-start_time)*24*60>ANSWER_TIME_LENGTH
  </update>
  
  <!-- 修改考生的作答情况的交卷状态 -->
  <update id="updateExamaineeQAStatusByTimeout" parameterType="java.util.Map">
  	update EXM_EXAMINEE_QUESTION set status='E'
  	 where EXAM_NUMBER=#{times}
       and RECORD_STATUS='A'
  	   and EXAMINATION_ID=#{examinationId}
  </update>
  
</mapper>


