<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="User">
  <resultMap id="BaseResultMap" type="com.kingnod.etraining.organization.entity.User">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    <id column="A_ID" jdbcType="DECIMAL" property="id" />
    <result column="A_FULL_NAME" jdbcType="VARCHAR" property="fullName" />
    <result column="A_NICK_NAME" jdbcType="VARCHAR" property="nickName" />
    <result column="A_LOGIN_NAME" jdbcType="VARCHAR" property="loginName" />
    <result column="A_PASSWORD" jdbcType="VARCHAR" property="password" />
    <result column="A_EMAIL" jdbcType="VARCHAR" property="email" />
    <result column="A_SITE_ID" jdbcType="DECIMAL" property="siteId" />
    <result column="A_ORGANIZATION_ID" jdbcType="DECIMAL" property="organizationId" />
    <result column="A_MANAGER_ID" jdbcType="DECIMAL" property="managerId" />
    <result column="A_ADMINISTRATOR" jdbcType="CHAR" property="administrator" />
    <result column="A_RECORD_STATUS" jdbcType="CHAR" property="recordStatus" />
    <result column="A_UPDATE_COUNT" jdbcType="DECIMAL" property="updateCount" />
    <result column="A_CREATOR_ID" jdbcType="DECIMAL" property="creatorId" />
    <result column="A_CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
    <result column="A_UPDATER_ID" jdbcType="DECIMAL" property="updaterId" />
    <result column="A_UPDATE_DATE" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="A_STATUS" jdbcType="CHAR" property="status" />
    <result column="A_VALIDITY_DATE" jdbcType="TIMESTAMP" property="validityDate" />
    <association column="A_ID" property="propertyData" select="UserPropertyData.findByUserId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    A.ID as A_ID, A.FULL_NAME as A_FULL_NAME, A.NICK_NAME as A_NICK_NAME, A.LOGIN_NAME as A_LOGIN_NAME, 
    A.PASSWORD as A_PASSWORD, A.EMAIL as A_EMAIL, A.SITE_ID as A_SITE_ID, A.ORGANIZATION_ID as A_ORGANIZATION_ID, 
    A.MANAGER_ID as A_MANAGER_ID, A.ADMINISTRATOR as A_ADMINISTRATOR, A.RECORD_STATUS as A_RECORD_STATUS, 
    A.UPDATE_COUNT as A_UPDATE_COUNT, A.CREATOR_ID as A_CREATOR_ID, A.CREATE_DATE as A_CREATE_DATE, 
    A.UPDATER_ID as A_UPDATER_ID, A.UPDATE_DATE as A_UPDATE_DATE, A.STATUS as A_STATUS, 
    A.VALIDITY_DATE as A_VALIDITY_DATE
  </sql>
  <select id="findByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
    <!--
      WARNING - @自定义
    -->
    select
    <include refid="Base_Column_List" />
     from ORG_USER A
     <if test="params.organizationId != null" >
       inner join ORG_ORGANIZATION_HIERARCHY M on A.ORGANIZATION_ID = M.ORGANIZATION_ID and M.HIERARCHY_ID =  #{params.organizationId,jdbcType=DECIMAL}
     </if>
    <if test="_parameter != null">
      <where><include refid="Global.Where_Clause" /></where>
    </if>
    <if test="hasOrderBy">
      order by
      <foreach collection="orderBys" item="orderBy" separator=",">
        ${orderBy}
      </foreach>
    </if>
  </select>
  <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    select 
    <include refid="Base_Column_List" />
    from ORG_USER A
    where A.ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteById" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    delete from ORG_USER
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByCriteria" parameterType="com.kingnod.core.criteria.Criteria">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    delete A from ORG_USER A
    <if test="_parameter != null">
      <where><include refid="Global.Where_Clause" /></where>
    </if>
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
  </delete>
  <insert id="insert" parameterType="com.kingnod.etraining.organization.entity.User">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select LAST_INSERT_ID()
    </selectKey>
    insert into ORG_USER (  FULL_NAME, NICK_NAME, 
      LOGIN_NAME, PASSWORD, EMAIL, 
      SITE_ID, ORGANIZATION_ID, MANAGER_ID, 
      ADMINISTRATOR, RECORD_STATUS, UPDATE_COUNT, 
      CREATOR_ID, CREATE_DATE, UPDATER_ID, 
      UPDATE_DATE, STATUS, VALIDITY_DATE
      )
    values (  #{fullName,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{loginName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{siteId,jdbcType=DECIMAL}, #{organizationId,jdbcType=DECIMAL}, #{managerId,jdbcType=DECIMAL}, 
      #{administrator,jdbcType=CHAR}, #{recordStatus,jdbcType=CHAR}, #{updateCount,jdbcType=DECIMAL}, 
      #{creatorId,jdbcType=DECIMAL}, #{createDate,jdbcType=TIMESTAMP}, #{updaterId,jdbcType=DECIMAL}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{status,jdbcType=CHAR}, #{validityDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <select id="countByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="java.lang.Integer">
    <!--
      WARNING - @自定义
    -->
    select count(A.ID) from ORG_USER A
    <if test="params.organizationId != null" >
       inner join ORG_ORGANIZATION_HIERARCHY M on A.ORGANIZATION_ID = M.ORGANIZATION_ID and M.HIERARCHY_ID =  #{params.organizationId,jdbcType=DECIMAL}
     </if>
    <if test="_parameter != null">
	    <where><include refid="Global.Where_Clause" /></where>
    </if>
  </select>
  <update id="updateByCriteria" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    update ORG_USER A
    <set>
      <if test="record.id != null">
        A.ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.fullName != null">
        A.FULL_NAME = #{record.fullName,jdbcType=VARCHAR},
      </if>
      <if test="record.nickName != null">
        A.NICK_NAME = #{record.nickName,jdbcType=VARCHAR},
      </if>
      <if test="record.loginName != null">
        A.LOGIN_NAME = #{record.loginName,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        A.PASSWORD = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        A.EMAIL = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.siteId != null">
        A.SITE_ID = #{record.siteId,jdbcType=DECIMAL},
      </if>
      <if test="record.organizationId != null">
        A.ORGANIZATION_ID = #{record.organizationId,jdbcType=DECIMAL},
      </if>
      <if test="record.managerId != null">
        A.MANAGER_ID = #{record.managerId,jdbcType=DECIMAL},
      </if>
      <if test="record.administrator != null">
        A.ADMINISTRATOR = #{record.administrator,jdbcType=CHAR},
      </if>
      <if test="record.recordStatus != null">
        A.RECORD_STATUS = #{record.recordStatus,jdbcType=CHAR},
      </if>
      <if test="record.updateCount != null">
        A.UPDATE_COUNT = #{record.updateCount,jdbcType=DECIMAL},
      </if>
      <if test="record.creatorId != null">
        A.CREATOR_ID = #{record.creatorId,jdbcType=DECIMAL},
      </if>
      <if test="record.createDate != null">
        A.CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updaterId != null">
        A.UPDATER_ID = #{record.updaterId,jdbcType=DECIMAL},
      </if>
      <if test="record.updateDate != null">
        A.UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        A.STATUS = #{record.status,jdbcType=CHAR},
      </if>
<!--      无法清除时间 <if test="record.validityDate != null"> -->
        A.VALIDITY_DATE = #{record.validityDate,jdbcType=TIMESTAMP},
<!--       </if> -->
    </set>
    <if test="_parameter != null">
      <where><include refid="Global.Where_Clause" /></where>
    </if>
  </update>
  <update id="update" parameterType="com.kingnod.etraining.organization.entity.User">
    <!--
      WARNING - @自定义
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on 2012-04-20 10:37.
    -->
    update ORG_USER A
    <set>
      <if test="id != null">
        A.ID = #{id,jdbcType=DECIMAL},
      </if>
      <if test="fullName != null">
        A.FULL_NAME = #{fullName,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        A.NICK_NAME = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null">
        A.LOGIN_NAME = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        A.PASSWORD = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        A.EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="siteId != null">
        A.SITE_ID = #{siteId,jdbcType=DECIMAL},
      </if>
      <if test="organizationId != null">
        A.ORGANIZATION_ID = #{organizationId,jdbcType=DECIMAL},
      </if>
<!--     无法清除上级  <if test="managerId != null"> -->
        A.MANAGER_ID = #{managerId,jdbcType=DECIMAL},
<!--       </if> -->
      <if test="administrator != null">
        A.ADMINISTRATOR = #{administrator,jdbcType=CHAR},
      </if>
      <if test="recordStatus != null">
        A.RECORD_STATUS = #{recordStatus,jdbcType=CHAR},
      </if>
      <if test="updateCount != null">
        A.UPDATE_COUNT = #{updateCount,jdbcType=DECIMAL},
      </if>
      <if test="creatorId != null">
        A.CREATOR_ID = #{creatorId,jdbcType=DECIMAL},
      </if>
      <if test="createDate != null">
        A.CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updaterId != null">
        A.UPDATER_ID = #{updaterId,jdbcType=DECIMAL},
      </if>
      <if test="updateDate != null">
        A.UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        A.STATUS = #{status,jdbcType=CHAR},
      </if>
<!--      无法清除时间 <if test="validityDate != null"> -->
        A.VALIDITY_DATE = #{validityDate,jdbcType=TIMESTAMP},
<!--       </if> -->
    </set>
    where A.ID = #{id,jdbcType=DECIMAL}
  </update>
  
  <select id="getUsersByGroupId" parameterType="long" resultMap="BaseResultMap">
    <!--
      WARNING - @根据groupId获取Users集合
    -->
    select
    <include refid="Base_Column_List" />
     from ORG_USER A
     where id in (select user_id from user_group_users where group_id=#{groupId} )
  </select>
  <select id="findNewUserIdsByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="long">
    <!--
      WARNING - @自定义：查询满足条件的新进来的用户
    -->
    select DISTINCT Y.ID from org_user_group_users X right join
    (<include refid="userGroupMemberWhereClause" />) Y 
    on X.USER_ID = Y.ID AND X.USER_GROUP_ID = #{params.groupId} AND X.RECORD_STATUS = 'A'
    where X.ID IS NULL
  </select>
  
  <select id="findRemovedUserIdsByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="long">
    <!--
      WARNING - @自定义：查询不满足用户组条件的将被剔除的用户
    -->
    select DISTINCT X.user_id from org_user_group_users X left join
    (<include refid="userGroupMemberWhereClause" />) Y 
     on X.USER_ID = Y.ID where X.USER_GROUP_ID = #{params.groupId} AND X.RECORD_STATUS = 'A' AND Y.ID IS NULL
  </select>
  
  
  <select id="findNewEnrollIdsByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="long">
    <!--
      WARNING - @自定义：学员用户  查询满足条件的新进来的用户
    -->
    select DISTINCT Y.ID from ATY_ENROLL_LEARNER X right join
    (<include refid="userGroupMemberWhereClause" />) Y 
    on X.USER_ID = Y.ID AND X.ACTIVITY_ID = #{params.activityId} AND X.RECORD_STATUS = 'A'
    where X.ID IS NULL
  </select>
  
  <select id="findRemovedEnrollIdsByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="long">
    <!--
      WARNING - @自定义：学员用户 查询不满足用户组条件的将被剔除的用户
    -->
    select DISTINCT X.USER_ID from ATY_ENROLL_LEARNER X left join
    (<include refid="userGroupMemberWhereClause" />) Y 
     on X.USER_ID = Y.ID where X.ACTIVITY_ID = #{params.activityId} AND X.RECORD_STATUS = 'A' AND Y.ID IS NULL
  </select>
  
  
  <select id="findUserIdsByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultType="long">
    <!--
      WARNING - @自定义：查询满足条件的用户
    -->
    <include refid="userGroupMemberWhereClause" />
  </select>
  <sql id="userGroupMemberWhereClause">
    <!--
      WARNING - @自定义: 根据用户组条件设置查询满足条件的用户ID
    -->
<!-- 	   SELECT DISTINCT A.ID  -->
<!-- 	     FROM ORG_USER A -->
<!-- 	LEFT JOIN ORG_USER_PROPERTY_DATA B ON  A.ID = B.USER_ID -->
<!-- 	LEFT JOIN ORG_USER_GROUP_USERS   C ON  A.ID = C.USER_ID -->
    <if test="_parameter != null and conditions.size &gt; 0">
    <trim prefix=" " prefixOverrides="UNION">
      <foreach   collection="conditions" item="condition"  index="index"  >               
        UNION
        <if test="condition.group"> 
           
          <trim prefix="(" prefixOverrides="INTERSECT" suffix=")" >           
          <foreach   collection="condition.all" index="groupIndex" item="criterion"  >          	
          	INTERSECT
          	SELECT DISTINCT A.ID 
		     FROM ORG_USER A
		LEFT JOIN ORG_USER_PROPERTY_DATA B ON  A.ID = B.USER_ID AND B.RECORD_STATUS='A'		 
		LEFT JOIN ORG_USER_GROUP_USERS   C ON  A.ID = C.USER_ID AND C.RECORD_STATUS='A' AND C.EXCLUDED='0'             
			<where>
            <choose>
              <when test="criterion.between">
                 ${criterion.expression} #{criterion.value.start} and #{criterion.value.end} 
              </when>
              <when test="criterion.list">
                 ${criterion.expression} 
                <foreach close=")" collection="criterion.value" item="inItem" open="(" separator=",">
                  #{inItem}
                </foreach>
              </when>
              <when test="criterion.none">
                 ${criterion.expression} 
              </when>
              <otherwise>
                 ${criterion.expression} #{criterion.value} 
              </otherwise>
            </choose>
            </where>
            AND A.RECORD_STATUS='A'
          </foreach>
          </trim>
        </if>
        <if test="condition.group == false">
        	
          	SELECT DISTINCT A.ID 
		     FROM ORG_USER A
		LEFT JOIN ORG_USER_PROPERTY_DATA B ON  A.ID = B.USER_ID AND B.RECORD_STATUS='A'
		LEFT JOIN ORG_USER_GROUP_USERS   C ON  A.ID = C.USER_ID AND C.RECORD_STATUS='A' AND C.EXCLUDED='0'
		  <where>
          <choose>
            <when test="condition.between">
              ${condition.expression} #{condition.value.start} and #{condition.value.end}
            </when>
            <when test="condition.list">
              ${condition.expression}
              <foreach close=")" collection="condition.value" item="inItem" open="(" separator=",">
                #{inItem}
              </foreach>
            </when>
            <when test="condition.none">
              ${condition.expression} 
            </when>
            <otherwise>
               ${condition.expression} #{condition.value} 
            </otherwise>
          </choose>
          </where>
          AND A.RECORD_STATUS='A'
        </if>
        
      </foreach>
      </trim>
    </if>
    
  </sql>
    
  <select id="findAllReadByCriteria" parameterType="com.kingnod.core.criteria.Criteria" resultMap="BaseResultMap">
    <!--
      WARNING - @自定义：查询所有有读取权限的用户
    -->
    select
    <include refid="Base_Column_List" />
     from ORG_USER A 
     inner join (<include refid="EntityReadPermission.findAllByCriteria" />) B on A.ORGANIZATION_ID = B.ENTITY_ID
    <if test="_parameter != null">
      <where>
        <include refid="Global.Where_Clause" />
      </where>
    </if>
    <if test="hasOrderBy">
      order by
      <foreach collection="orderBys" item="orderBy" separator=",">
        ${orderBy}
      </foreach>
    </if>
  </select>
    <select id="findNoSendNoticeUserByCriteria" parameterType="com.kingnod.core.criteria.Criteria"  resultMap="BaseResultMap">
    <!--
      WARNING - @自定义：查找用户组改变但是未发送通知的用户  @author maxudong
        STATUS 对应 系统还是人工  ，A_RECORD_STATUS 对应移入加入 否则还要新建立entity
    --> 
      SELECT   A.ID as A_ID, A.FULL_NAME AS A_FULL_NAME,  A.EMAIL AS A_EMAIL, A.LOGIN_NAME as A_LOGIN_NAME ,C.NAME AS A_NICK_NAME,
      CASE  WHEN B.RECORD_STATUS = 'A' THEN  #{params.addUser} ELSE #{params.removeUser}  END  A_RECORD_STATUS,
      CASE  WHEN B.UPDATER_ID = 0 THEN  #{params.sysOperating} ELSE #{params.userOperating}  END  A_STATUS  
      FROM ORG_USER A ,ORG_USER_GROUP_USERS  B ,ORG_ORGANIZATION C
      WHERE B.USER_GROUP_ID =#{params.groupId}  
        AND B.USER_ID =A.ID 
        AND   A.ORGANIZATION_ID = C.ID
        AND  A.RECORD_STATUS = 'A' 
        AND  ( B.IS_NEW = '1')
  </select>
  
   <select id="findNoSendNoticeEnrollByCriteria" parameterType="com.kingnod.core.criteria.Criteria"  resultMap="BaseResultMap">
    <!--
      WARNING - @自定义：查找用学员组改变但是未发送通知的用户  @author maxudong 由于用户组和成员组 代码实现方式不同导致 sql，其实可以用同一sql
      A_NICK_NAME暂时对应 组织名称 ，STATUS 对应 系统还是人工  ，A_RECORD_STATUS 对应移入加入 
    --> 
      SELECT   A.ID AS A_ID, A.FULL_NAME AS A_FULL_NAME,  A.EMAIL AS A_EMAIL, A.LOGIN_NAME AS A_LOGIN_NAME ,
      <if test="params.addUser != null" >
      CASE  WHEN B.RECORD_STATUS = 'A' THEN  #{params.addUser} ELSE #{params.removeUser}  END  A_RECORD_STATUS,
      </if>
      <if test="params.sysOperating != null" >
      CASE  WHEN B.UPDATER_ID = 0 THEN  #{params.sysOperating} ELSE #{params.userOperating}  END  A_STATUS  ,
      </if>
      C.NAME AS A_NICK_NAME
      FROM ORG_USER A ,ATY_ENROLL_LEARNER  B ,ORG_ORGANIZATION C
      WHERE  B.ACTIVITY_ID = #{params.activityId}  AND  A.RECORD_STATUS = 'A' 
        <if test="params.isNew != null" >
              AND  B.IS_NEW = #{params.isNew}    
       </if>
        AND  B.USER_ID =A.ID        
        AND    A.ORGANIZATION_ID = C.ID
      <if test="params.recordStatus != null" >
             AND   B.RECORD_STATUS = #{params.recordStatus}    
      </if>
  </select>
  
</mapper>